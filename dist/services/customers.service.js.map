{"version":3,"sources":["../../src/services/customers.service.ts"],"sourcesContent":["import { Service } from 'typedi';\nimport pg from '@database';\nimport { HttpException } from '@exceptions/httpException';\nimport { Customer, UpdateCustomerData } from '@interfaces/customers.interface';\nimport { FileUploader } from '@utils/imageStorage';\nimport { RedisClient } from '@/database/redis';\nimport { CustomError } from '@exceptions/CustomError';\nimport moment from 'moment';\nimport { LoginQr, VerifyDto } from '@dtos/customer.dto';\nimport { createToken } from '@services/auth.service';\nimport { TokenData } from '@interfaces/auth.interface';\nimport io from '@/socket/socket';\nimport { sendVerification } from '@services/sms.service';\n@Service()\nexport class CustomerService {\n  private redis: RedisClient;\n  constructor() {\n    this.redis = new RedisClient();\n  }\n  public async findCustomerById(customerId: string): Promise<Customer> {\n    const { rows, rowCount } = await pg.query(\n      `\n        SELECT *\n        FROM customer\n        WHERE id = $1\n      `,\n      [customerId],\n    );\n    if (!rowCount) throw new CustomError('USER_NOT_FOUND');\n    const { rows: summary } = await pg.query(\n      `\nwith my_bank_cards as (\n  select id, pan from customer_card where customer_id = $1\n)\nselect\nsum(case when type = 'expense' then amount else 0 END) as expense,\ncount(case when type = 'expense' then 1 else null END) as expense_count,\nsum(case when type = 'income' then amount else 0 END) as income,\ncount(case when type = 'income' then 1 else null END) as income_count\nfrom (\n  select amount, type\n  from transfer\n  where extract(month from created_at) = extract(month from current_date)\n    and owner_id = $1\n    and (sender_id in (select id from my_bank_cards) and type = 'expense')\n      or (receiver_id in (select id from my_bank_cards) and type = 'income')\n  union all\n  select amount, type\n  from payment\n  where extract(month from created_at) = extract(month from current_date)\n    and owner_id = $1\n    and sender_id in (select id from my_bank_cards) and type = 'expense'\n) as combined_data;`,\n      [customerId],\n    );\n    const { rows: cards } = await pg.query(`Select sum(balance) from customer_card where customer_id =$1`, [customerId]);\n    const customer: Customer = rows[0];\n    customer.balance = cards[0].sum;\n    customer.summary = summary[0];\n    return customer;\n  }\n  public async updateCustomer(customerId: string, customerData: UpdateCustomerData, image: any): Promise<Customer> {\n    const { rows: findCustomer } = await pg.query(\n      `\n                 SELECT *\n                 FROM customer\n                 WHERE \"id\" = $1`,\n      [customerId],\n    );\n    if (!findCustomer[0]) throw new CustomError('USER_NOT_FOUND');\n    const name = customerData.name;\n    const deleteImage = customerData.deleteImage;\n    const newName = name || findCustomer[0].name;\n    const gender = customerData.gender || findCustomer[0].gender;\n    const newBirthDate = customerData.birthDate\n      ? moment(customerData.birthDate, 'DD/MM/YYYY').format('YYYY-MM-DDTHH:mm:ss.SSS[Z]').toString()\n      : customerData.birthDate;\n    const { rows: updateCustomerData } = await pg.query(\n      `\n        UPDATE\n          customer\n        SET \"name\" = $2,\n            \"gender\"= $3,\n            \"birth_date\"=$4\n        WHERE \"id\" = $1 RETURNING *\n      `,\n      [customerId, newName, gender, newBirthDate],\n    );\n    const fileUploader = new FileUploader('eu-north-1', 'image-24');\n    if (deleteImage) {\n      await pg.query(`Update customer set image_url = $1 where id = $2`, [null, customerId]);\n      await fileUploader.deleteFile(findCustomer[0].image_url);\n    }\n    if (image) {\n      await fileUploader.deleteFile(findCustomer[0].image_url);\n      const objectKey = `${customerId}.${image.name.split('.').pop()}`;\n      const uploadPath = await fileUploader.uploadFile(image, objectKey);\n      const { rows: updateCustomer } = await pg.query(`Update customer set image_url = $1 where id= $2 returning *`, [uploadPath, customerId]);\n      if (updateCustomer[0]) {\n        updateCustomer[0].image_url = uploadPath;\n        return updateCustomer[0];\n      }\n    }\n  }\n  public async deleteCustomer(customerId: string): Promise<boolean> {\n    try {\n      const { rows: findCustomer } = await pg.query(\n        `\n          SELECT EXISTS(\n                   SELECT \"id\"\n                   FROM customer\n                   WHERE \"id\" = $1 ::uuid\n                   )`,\n        [customerId],\n      );\n\n      if (!findCustomer[0].exists) {\n        throw new HttpException(409, \"Customer doesn't exist\");\n      }\n      await pg.query(`delete from customer_device where customer_id=$1`, [customerId]);\n      await pg.query(\n        `\n          DELETE\n          FROM customer\n          WHERE id = $1\n        `,\n        [customerId],\n      );\n      return true;\n    } catch (error) {\n      console.error(`Error deleting customer:`, error);\n      throw error;\n    }\n  }\n  public static async getDeviceInfo(req: any): Promise<string> {\n    let { os, platform } = req.useragent;\n    const { browser, version } = req.useragent;\n    platform = platform === 'unknown' ? '' : platform;\n    os = os === 'unknown' ? '' : os;\n    return `${platform} ${os} ${browser} ${version}`.trim();\n  }\n  public async getOtp(phone: string): Promise<string> {\n    await this.redis.hGet('otp', phone, (err, otp) => {\n      if (err) throw new HttpException(403, err.message);\n\n      return JSON.parse(otp).code.toString();\n    });\n    throw new HttpException(404, 'Not found');\n  }\n  public async addToSaved(customerId: string, serviceId: string): Promise<void> {\n    await pg.query(\n      `\ninsert into customer_saved_service(customer_id, service_id)\nvalues($1, $2)\non conflict do nothing`,\n      [customerId, serviceId],\n    );\n  }\n  public async deleteFromSaved(customerId: string, serviceId: any): Promise<void> {\n    const { rows } = await pg.query(`Select * from customer_saved_service where service_id =$1 and customer_id = $2`, [serviceId, customerId]);\n    if (!rows[0]) {\n      throw new CustomError('SERVICE_NOT_FOUND');\n    }\n    await pg.query(`delete from customer_saved_service where customer_id  =$1 and service_id =$2`, [customerId, serviceId]);\n  }\n  public async updateCustomerLang(customerId: string, lang: string): Promise<boolean> {\n    const { rows } = await pg.query(`Select * from customer where id = $1`, [customerId]);\n    if (!rows[0]) throw new CustomError('USER_NOT_FOUND');\n\n    await pg.query(`Update customer set lang = $1 where id = $2`, [lang, customerId]);\n    return true;\n  }\n  public async loginWithQr(qrLogin: LoginQr, customerId: string): Promise<void> {\n    const redisQr = await this.redis.hGet('qr_login', qrLogin.allowDeviceId);\n    if (!redisQr) throw new CustomError('INVALID_REQUEST');\n    const qrObject = JSON.parse(redisQr);\n    if (qrObject.key !== qrLogin.key) throw new CustomError('INVALID_REQUEST');\n    const { rows } = await pg.query(`Select * from customer where id=$1`, [customerId]);\n    if (!rows[0]) throw new CustomError('USER_NOT_FOUND');\n    const customer: Customer = rows[0];\n    const tokenData: TokenData = createToken(customer);\n    console.log(qrObject.socketId);\n    io.to(qrObject.socketId).emit('qr_login_allow', { token: tokenData.token });\n    return;\n  }\n  public async getDevices(customerId: string): Promise<any> {\n    const { rows } = await pg.query(`Select * from customer_device where customer_id =$1`, [customerId]);\n    return rows;\n  }\n  public async deleteCustomerDevice(deviceId, customerId: string, lang: string): Promise<string> {\n    const { rows } = await pg.query(`Select * from customer_device where device_id = $1 and customer_id = $2`, [deviceId, customerId]);\n    if (!rows[0]) {\n      throw new CustomError('ALLOWED_FOR_TRUSTED');\n    }\n    const { rows: message } = await pg.query(\n      `delete from customer_device\n    where id = $1 and customer_id = $2\n    returning (select message from message where name = 'UNTRUST_SUCCESS') as message`,\n      [rows[0].id, customerId],\n    );\n    if (!message[0]) throw new CustomError('DATABASE_ERROR');\n    return message[0].message[lang];\n  }\n  public async sendCodeToPhone(verify: VerifyDto, deviceId, resend): Promise<any> {\n    const redisCode = await this.redis.hGet('customer_otp', JSON.stringify({ phone: verify.phone, deviceId }));\n    const codeObject = JSON.parse(redisCode);\n    const codeObject1 = {\n      code: Math.floor(100000 + Math.random() * 900000),\n      expiresAt: moment().add(2, 'minutes').valueOf(),\n      numAttempt: 0,\n    };\n    console.log(deviceId);\n    const device_phone = {\n      phone: verify.phone,\n      deviceId: deviceId,\n    };\n    if (!redisCode || moment().isAfter(codeObject.expiresAt)) {\n      await this.redis.hSet('customer_otp', JSON.stringify(device_phone), JSON.stringify(codeObject1));\n      await sendVerification(device_phone.phone, codeObject1.code);\n      return moment(codeObject1.expiresAt).diff(moment(), 'seconds');\n    }\n    if (redisCode && resend) {\n      if (moment().isAfter(codeObject.expiresAt)) {\n        await this.redis.hSet('customer_otp', JSON.stringify(device_phone), JSON.stringify(codeObject1));\n        await sendVerification(device_phone.phone, codeObject1.code);\n        return moment(codeObject1.expiresAt).diff(moment(), 'seconds');\n      }\n      const timeLeft = moment(codeObject.expiresAt).diff(moment(), 'seconds');\n      throw new CustomError('CODE_ALREADY_SEND', null, { timeLeft });\n    }\n  }\n}\n"],"names":["CustomerService","findCustomerById","customerId","rows","rowCount","pg","query","CustomError","summary","cards","customer","balance","sum","updateCustomer","customerData","image","findCustomer","name","deleteImage","newName","gender","newBirthDate","birthDate","moment","format","toString","updateCustomerData","fileUploader","FileUploader","deleteFile","image_url","objectKey","split","pop","uploadPath","uploadFile","deleteCustomer","exists","HttpException","error","console","getDeviceInfo","req","os","platform","useragent","browser","version","trim","getOtp","phone","redis","hGet","err","otp","message","JSON","parse","code","addToSaved","serviceId","deleteFromSaved","updateCustomerLang","lang","loginWithQr","qrLogin","redisQr","allowDeviceId","qrObject","key","tokenData","createToken","log","socketId","io","to","emit","token","getDevices","deleteCustomerDevice","deviceId","id","sendCodeToPhone","verify","resend","redisCode","stringify","codeObject","codeObject1","Math","floor","random","expiresAt","add","valueOf","numAttempt","device_phone","isAfter","hSet","sendVerification","diff","timeLeft","constructor","RedisClient","Service"],"mappings":"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"}
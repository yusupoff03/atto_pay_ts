{"version":3,"sources":["../../src/services/customers.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { Service } from 'typedi';\nimport pg from '@database';\nimport { HttpException } from '@exceptions/httpException';\nimport { Customer, UpdateCustomerData } from '@interfaces/customers.interface';\nimport { FileUploader } from '@utils/imageStorage';\nimport { RedisClient } from '@/database/redis';\nimport { CustomError } from '@exceptions/CustomError';\n\n@Service()\nexport class CustomerService {\n  private redis: RedisClient;\n  constructor() {\n    this.redis = new RedisClient();\n  }\n  public async findAllCustomer(): Promise<Customer[]> {\n    const { rows } = await pg.query(`\n      SELECT *\n      FROM customer\n    `);\n    return rows;\n  }\n\n  public async findCustomerById(customerId: string): Promise<Customer> {\n    const { rows, rowCount } = await pg.query(\n      `\n        SELECT *\n        FROM customer\n        WHERE id = $1\n      `,\n      [customerId],\n    );\n    if (!rowCount) throw new CustomError('USER_NOT_FOUND');\n    const { rows: cards } = await pg.query(`Select sum(balance) from customer_card where customer_id =$1`, [customerId]);\n    const customer: Customer = rows[0];\n    customer.balance = cards[0].sum;\n    return customer;\n  }\n  public async updateCustomer(customerId: string, customerData: UpdateCustomerData, image: any): Promise<Customer> {\n    const { rows: findCustomer } = await pg.query(\n      `\n                 SELECT *\n                 FROM customer\n                 WHERE \"id\" = $1`,\n      [customerId],\n    );\n    if (!findCustomer[0]) throw new CustomError('USER_NOT_FOUND');\n    const name = customerData.name;\n    const password = customerData.password;\n    const deleteImage = customerData.deleteImage;\n    const hashedPassword = password ? await hash(password, 10) : findCustomer[0].password;\n    const newName = name || findCustomer[0].name;\n    const newPassword = hashedPassword || findCustomer[0].hashed_password;\n    const gender = customerData.gender || findCustomer[0].gender;\n    const birthDate = customerData.birthDate || findCustomer[0].birthDate;\n    const { rows: updateCustomerData } = await pg.query(\n      `\n        UPDATE\n          customer\n        SET \"name\"    = $2,\n            \"hashed_password\" = $3,\n            \"gender\"= $4,\n            \"birth_date\"=$5\n        WHERE \"id\" = $1 RETURNING *\n      `,\n      [customerId, newName, newPassword, gender, birthDate],\n    );\n    const fileUploader = new FileUploader('eu-north-1', 'image-24');\n    if (deleteImage) {\n      await pg.query(`Update customer set image_url = $1 where id = $2`, [null, customerId]);\n      await fileUploader.deleteFile(findCustomer[0].image_url);\n    }\n    if (image) {\n      await fileUploader.deleteFile(findCustomer[0].image_url);\n      const objectKey = `${customerId}.${image.name.split('.').pop()}`;\n      const uploadPath = await fileUploader.uploadFile(image, objectKey);\n      const { rows: updateCustomer } = await pg.query(`Update customer set image_url = $1 where id= $2 returning *`, [uploadPath, customerId]);\n      if (updateCustomer[0]) {\n        updateCustomer[0].image_url = uploadPath;\n        return updateCustomer[0];\n      }\n    }\n  }\n  public async deleteCustomer(customerId: string): Promise<boolean> {\n    try {\n      console.log(`Deleting customer with ID: ${customerId}`);\n      const { rows: findCustomer } = await pg.query(\n        `\n          SELECT EXISTS(\n                   SELECT \"id\"\n                   FROM customer\n                   WHERE \"id\" = $1 ::uuid\n                   )`,\n        [customerId],\n      );\n\n      if (!findCustomer[0].exists) {\n        throw new HttpException(409, \"Customer doesn't exist\");\n      }\n      await pg.query(`delete from customer_device where customer_id=$1`, [customerId]);\n      await pg.query(\n        `\n          DELETE\n          FROM customer\n          WHERE id = $1\n        `,\n        [customerId],\n      );\n      return true;\n    } catch (error) {\n      console.error(`Error deleting customer:`, error);\n      throw error;\n    }\n  }\n\n  public async getOtp(phone: string): Promise<string> {\n    await this.redis.hGet('otp', phone, (err, otp) => {\n      if (err) throw new HttpException(403, err.message);\n\n      return JSON.parse(otp).code.toString();\n    });\n    throw new HttpException(404, 'Not found');\n  }\n  public async addToSaved(customerId: string, serviceId: any): Promise<void> {\n    await pg.query(\n      `\ninsert into customer_saved_service(customer_id, service_id)\nvalues($1, $2)\non conflict do nothing`,\n      [customerId, serviceId],\n    );\n  }\n  public async deleteFromSaved(customerId: string, serviceId: any): Promise<void> {\n    const { rows } = await pg.query(`Select * from customer_saved_service where service_id =$1 and customer_id = $2`, [serviceId, customerId]);\n    if (!rows[0]) {\n      throw new CustomError('SERVICE_NOT_FOUND');\n    }\n    await pg.query(`delete from customer_saved_service where customer_id  =$1 and service_id =$2`, [customerId, serviceId]);\n  }\n  async updateCustomerLang(customerId: string, lang: string): Promise<boolean> {\n    const { rows } = await pg.query(`Select * from customer where id = $1`, [customerId]);\n    if (!rows[0]) throw new CustomError('USER_NOT_FOUND');\n\n    await pg.query(`Update customer set lang = $1 where id = $2`, [lang, customerId]);\n    return true;\n  }\n}\n"],"names":["CustomerService","findAllCustomer","rows","pg","query","findCustomerById","customerId","rowCount","CustomError","cards","customer","balance","sum","updateCustomer","customerData","image","findCustomer","name","password","deleteImage","hashedPassword","hash","newName","newPassword","hashed_password","gender","birthDate","updateCustomerData","fileUploader","FileUploader","deleteFile","image_url","objectKey","split","pop","uploadPath","uploadFile","deleteCustomer","console","log","exists","HttpException","error","getOtp","phone","redis","hGet","err","otp","message","JSON","parse","code","toString","addToSaved","serviceId","deleteFromSaved","updateCustomerLang","lang","constructor","RedisClient","Service"],"mappings":"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"}
{"version":3,"sources":["../../src/services/currency,service.ts"],"sourcesContent":["import { Service } from 'typedi';\nimport pg from '@database';\nimport { HttpException } from '@exceptions/httpException';\nimport { CurrencyCreateDto, CurrencyUpdateDto } from '@dtos/currency.dto';\n@Service()\nexport class CurrencyService {\n  public async createCurrency(currencyDto: CurrencyCreateDto) {\n    const { name, abbreviation } = currencyDto;\n    const { rows } = await pg.query(`INSERT INTO currency(name,abbreviation) values ($1,$2) RETURNING *`, [name, abbreviation]);\n    if (!rows[0].exists) {\n      throw new HttpException(500, 'Database error');\n    }\n    return rows[0];\n  }\n  public async updateCurrency(currencyUpdateDto: CurrencyUpdateDto) {\n    const { id, name, abbreviation } = currencyUpdateDto;\n    const { rows } = await pg.query(`SELECT * FROM currency where id=$1`, [id]);\n    if (!rows[0].exists) {\n      throw new HttpException(404, 'Currency not found');\n    }\n    const newName = name || rows[0].name;\n    const newAbbreviation = abbreviation || rows[0].abbreviation;\n    const { rows: currency } = await pg.query(`UPDATE currency SET name=$1,abbbreviation=$2 where id=$3 RETURNING *`, [id, newName, newAbbreviation]);\n    if (currency[0].exists) {\n      return currency[0];\n    }\n    throw new HttpException(500, 'Database error');\n  }\n  public async deleteCurrency(id: string) {\n    const { rows } = await pg.query(`Select * from currency where id=$1`, [id]);\n    if (!rows[0].exists) {\n      throw new HttpException(404, 'Currency not found');\n    }\n    await pg.query(`delete from currency where id=$1`, [id]);\n    return true;\n  }\n  public async getCurrencyById(id: string) {\n    const { rows } = await pg.query(`Select * from currency where id=$1`, [id]);\n    if (!rows[0].exists) {\n      throw new HttpException(404, 'Currency not found');\n    }\n    return rows[0];\n  }\n}\n"],"names":["CurrencyService","createCurrency","currencyDto","name","abbreviation","rows","pg","query","exists","HttpException","updateCurrency","currencyUpdateDto","id","newName","newAbbreviation","currency","deleteCurrency","getCurrencyById","Service"],"mappings":";;;;+BAKaA;;;eAAAA;;;wBALW;iEACT;+BACe;;;;;;;;;;;;IAGjBA,kBAAN;IACL,MAAaC,eAAeC,WAA8B,EAAE;QAC1D,MAAM,EAAEC,IAAI,EAAEC,YAAY,EAAE,GAAGF;QAC/B,MAAM,EAAEG,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,kEAAkE,CAAC,EAAE;YAACJ;YAAMC;SAAa;QAC1H,IAAI,CAACC,IAAI,CAAC,EAAE,CAACG,MAAM,EAAE;YACnB,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;QACA,OAAOJ,IAAI,CAAC,EAAE;IAChB;IACA,MAAaK,eAAeC,iBAAoC,EAAE;QAChE,MAAM,EAAEC,EAAE,EAAET,IAAI,EAAEC,YAAY,EAAE,GAAGO;QACnC,MAAM,EAAEN,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;YAACK;SAAG;QAC1E,IAAI,CAACP,IAAI,CAAC,EAAE,CAACG,MAAM,EAAE;YACnB,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;QACA,MAAMI,UAAUV,QAAQE,IAAI,CAAC,EAAE,CAACF,IAAI;QACpC,MAAMW,kBAAkBV,gBAAgBC,IAAI,CAAC,EAAE,CAACD,YAAY;QAC5D,MAAM,EAAEC,MAAMU,QAAQ,EAAE,GAAG,MAAMT,iBAAE,CAACC,KAAK,CAAC,CAAC,oEAAoE,CAAC,EAAE;YAACK;YAAIC;YAASC;SAAgB;QAChJ,IAAIC,QAAQ,CAAC,EAAE,CAACP,MAAM,EAAE;YACtB,OAAOO,QAAQ,CAAC,EAAE;QACpB;QACA,MAAM,IAAIN,4BAAa,CAAC,KAAK;IAC/B;IACA,MAAaO,eAAeJ,EAAU,EAAE;QACtC,MAAM,EAAEP,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;YAACK;SAAG;QAC1E,IAAI,CAACP,IAAI,CAAC,EAAE,CAACG,MAAM,EAAE;YACnB,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;QACA,MAAMH,iBAAE,CAACC,KAAK,CAAC,CAAC,gCAAgC,CAAC,EAAE;YAACK;SAAG;QACvD,OAAO;IACT;IACA,MAAaK,gBAAgBL,EAAU,EAAE;QACvC,MAAM,EAAEP,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;YAACK;SAAG;QAC1E,IAAI,CAACP,IAAI,CAAC,EAAE,CAACG,MAAM,EAAE;YACnB,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;QACA,OAAOJ,IAAI,CAAC,EAAE;IAChB;AACF;AAtCaL;IADZkB,IAAAA,eAAO;GACKlB"}
{"version":3,"sources":["../../src/services/merchant.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { Service } from 'typedi';\nimport pg from '@database';\nimport { HttpException } from '@exceptions/httpException';\nimport { Merchant } from '@interfaces/merchant.interface';\nimport { CustomError } from '@exceptions/CustomError';\n@Service()\nexport class MerchantService {\n  public async getMerchantById(merchantId: string): Promise<Merchant> {\n    const { rows, rowCount } = await pg.query(`Select * from merchant where id=$1`, [merchantId]);\n    if (!rowCount) {\n      throw new CustomError('USER_NOT_FOUND');\n    }\n    return rows[0];\n  }\n  public async updateMerchant(merchantId: string, name: string, password: string): Promise<Merchant> {\n    const { rows: findMerchant } = await pg.query(\n      `\n                 SELECT *\n                 FROM merchant\n                 WHERE \"id\" = $1\n                 )`,\n      [merchantId],\n    );\n    if (findMerchant[0].exists) throw new HttpException(409, \"Merchant doesn't exist\");\n    const hashedPassword = await hash(password, 10);\n    const newName = name || findMerchant[0].name;\n    const newHashedPassword = hashedPassword || findMerchant[0].hashed_password;\n    const { rows: updateMerchantData } = await pg.query(\n      `\n        UPDATE\n          merchant\n        SET \"email\"    = $2,\n            \"hashed_password\" = $3\n        WHERE \"id\" = $1 RETURNING \"phone\", \"hashed_password\"\n      `,\n      [merchantId, newName, newHashedPassword],\n    );\n\n    return updateMerchantData[0];\n  }\n  public async updateMerchantLang(merchantId: string, lang: any): Promise<void> {\n    const { rows } = await pg.query(`Select * from merchant where id=$1`, [merchantId]);\n    if (!rows[0]) {\n      throw new CustomError('USER_NOT_FOUND');\n    }\n    await pg.query(`Update merchant set lang = $1  where id = $2`, [lang, merchantId]);\n  }\n  public async deleteMerchant(merchantId: string): Promise<void> {\n    const { rows, rowCount } = await pg.query(`Select * from merchant where id=$1`, [merchantId]);\n    if (!rowCount) {\n      throw new HttpException(404, 'Merchant not found');\n    }\n    await pg.query(`delete from merchant where id=$1`, [merchantId]);\n  }\n}\n"],"names":["MerchantService","getMerchantById","merchantId","rows","rowCount","pg","query","CustomError","updateMerchant","name","password","findMerchant","exists","HttpException","hashedPassword","hash","newName","newHashedPassword","hashed_password","updateMerchantData","updateMerchantLang","lang","deleteMerchant","Service"],"mappings":";;;;+BAOaA;;;eAAAA;;;wBAPQ;wBACG;iEACT;+BACe;6BAEF;;;;;;;;;;;;IAEfA,kBAAN;IACL,MAAaC,gBAAgBC,UAAkB,EAAqB;QAClE,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;YAACJ;SAAW;QAC5F,IAAI,CAACE,UAAU;YACb,MAAM,IAAIG,wBAAW,CAAC;QACxB;QACA,OAAOJ,IAAI,CAAC,EAAE;IAChB;IACA,MAAaK,eAAeN,UAAkB,EAAEO,IAAY,EAAEC,QAAgB,EAAqB;QACjG,MAAM,EAAEP,MAAMQ,YAAY,EAAE,GAAG,MAAMN,iBAAE,CAACC,KAAK,CAC3C,CAAC;;;;kBAIW,CAAC,EACb;YAACJ;SAAW;QAEd,IAAIS,YAAY,CAAC,EAAE,CAACC,MAAM,EAAE,MAAM,IAAIC,4BAAa,CAAC,KAAK;QACzD,MAAMC,iBAAiB,MAAMC,IAAAA,YAAI,EAACL,UAAU;QAC5C,MAAMM,UAAUP,QAAQE,YAAY,CAAC,EAAE,CAACF,IAAI;QAC5C,MAAMQ,oBAAoBH,kBAAkBH,YAAY,CAAC,EAAE,CAACO,eAAe;QAC3E,MAAM,EAAEf,MAAMgB,kBAAkB,EAAE,GAAG,MAAMd,iBAAE,CAACC,KAAK,CACjD,CAAC;;;;;;MAMD,CAAC,EACD;YAACJ;YAAYc;YAASC;SAAkB;QAG1C,OAAOE,kBAAkB,CAAC,EAAE;IAC9B;IACA,MAAaC,mBAAmBlB,UAAkB,EAAEmB,IAAS,EAAiB;QAC5E,MAAM,EAAElB,IAAI,EAAE,GAAG,MAAME,iBAAE,CAACC,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;YAACJ;SAAW;QAClF,IAAI,CAACC,IAAI,CAAC,EAAE,EAAE;YACZ,MAAM,IAAII,wBAAW,CAAC;QACxB;QACA,MAAMF,iBAAE,CAACC,KAAK,CAAC,CAAC,4CAA4C,CAAC,EAAE;YAACe;YAAMnB;SAAW;IACnF;IACA,MAAaoB,eAAepB,UAAkB,EAAiB;QAC7D,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;YAACJ;SAAW;QAC5F,IAAI,CAACE,UAAU;YACb,MAAM,IAAIS,4BAAa,CAAC,KAAK;QAC/B;QACA,MAAMR,iBAAE,CAACC,KAAK,CAAC,CAAC,gCAAgC,CAAC,EAAE;YAACJ;SAAW;IACjE;AACF;AAhDaF;IADZuB,IAAAA,eAAO;GACKvB"}
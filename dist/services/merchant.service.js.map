{"version":3,"sources":["../../src/services/merchant.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { Service } from 'typedi';\nimport pg from '@database';\nimport { HttpException } from '@exceptions/httpException';\nimport { Merchant } from '@interfaces/merchant.interface';\nimport { CustomError } from '@exceptions/CustomError';\nimport RedisClient from '@/database/redis';\n@Service()\nexport class MerchantService {\n  private redis: RedisClient;\n  constructor() {\n    this.redis = new RedisClient();\n  }\n  public async getMerchantById(merchantId: string): Promise<Merchant> {\n    const { rows, rowCount } = await pg.query(`Select * from merchant where id=$1`, [merchantId]);\n    if (!rowCount) {\n      throw new CustomError('USER_NOT_FOUND');\n    }\n    return rows[0];\n  }\n  public async updateMerchant(merchantId: string, name: string): Promise<Merchant> {\n    const { rows: findMerchant } = await pg.query(\n      `\n                 SELECT *\n                 FROM merchant\n                 WHERE id = $1\n                 `,\n      [merchantId],\n    );\n    if (findMerchant[0].exists) throw new CustomError('USER_NOT_FOUND');\n    const newName = name || findMerchant[0].name;\n    const { rows: updateMerchantData } = await pg.query(\n      `\n        UPDATE\n          merchant\n        SET name = $2\n        WHERE id = $1\n      `,\n      [merchantId, newName],\n    );\n\n    return updateMerchantData[0];\n  }\n  public async updateMerchantLang(merchantId: string, lang: any): Promise<void> {\n    const { rows } = await pg.query(`Select * from merchant where id=$1`, [merchantId]);\n    if (!rows[0]) {\n      throw new CustomError('USER_NOT_FOUND');\n    }\n    await pg.query(`Update merchant set lang = $1  where id = $2`, [lang, merchantId]);\n  }\n  public async deleteMerchant(merchantId: string): Promise<void> {\n    const { rows, rowCount } = await pg.query(`Select * from merchant where id=$1`, [merchantId]);\n    if (!rowCount) {\n      throw new HttpException(404, 'Merchant not found');\n    }\n    await pg.query(`delete from merchant where id=$1`, [merchantId]);\n  }\n}\n"],"names":["MerchantService","getMerchantById","merchantId","rows","rowCount","pg","query","CustomError","updateMerchant","name","findMerchant","exists","newName","updateMerchantData","updateMerchantLang","lang","deleteMerchant","HttpException","constructor","redis","RedisClient","Service"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBAPW;iEACT;+BACe;6BAEF;8DACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEXA,kBAAN;IAKL,MAAaC,gBAAgBC,UAAkB,EAAqB;QAClE,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;YAACJ;SAAW;QAC5F,IAAI,CAACE,UAAU;YACb,MAAM,IAAIG,wBAAW,CAAC;QACxB;QACA,OAAOJ,IAAI,CAAC,EAAE;IAChB;IACA,MAAaK,eAAeN,UAAkB,EAAEO,IAAY,EAAqB;QAC/E,MAAM,EAAEN,MAAMO,YAAY,EAAE,GAAG,MAAML,iBAAE,CAACC,KAAK,CAC3C,CAAC;;;;iBAIU,CAAC,EACZ;YAACJ;SAAW;QAEd,IAAIQ,YAAY,CAAC,EAAE,CAACC,MAAM,EAAE,MAAM,IAAIJ,wBAAW,CAAC;QAClD,MAAMK,UAAUH,QAAQC,YAAY,CAAC,EAAE,CAACD,IAAI;QAC5C,MAAM,EAAEN,MAAMU,kBAAkB,EAAE,GAAG,MAAMR,iBAAE,CAACC,KAAK,CACjD,CAAC;;;;;MAKD,CAAC,EACD;YAACJ;YAAYU;SAAQ;QAGvB,OAAOC,kBAAkB,CAAC,EAAE;IAC9B;IACA,MAAaC,mBAAmBZ,UAAkB,EAAEa,IAAS,EAAiB;QAC5E,MAAM,EAAEZ,IAAI,EAAE,GAAG,MAAME,iBAAE,CAACC,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;YAACJ;SAAW;QAClF,IAAI,CAACC,IAAI,CAAC,EAAE,EAAE;YACZ,MAAM,IAAII,wBAAW,CAAC;QACxB;QACA,MAAMF,iBAAE,CAACC,KAAK,CAAC,CAAC,4CAA4C,CAAC,EAAE;YAACS;YAAMb;SAAW;IACnF;IACA,MAAac,eAAed,UAAkB,EAAiB;QAC7D,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;YAACJ;SAAW;QAC5F,IAAI,CAACE,UAAU;YACb,MAAM,IAAIa,4BAAa,CAAC,KAAK;QAC/B;QACA,MAAMZ,iBAAE,CAACC,KAAK,CAAC,CAAC,gCAAgC,CAAC,EAAE;YAACJ;SAAW;IACjE;IA9CAgB,aAAc;QADd,uBAAQC,SAAR,KAAA;QAEE,IAAI,CAACA,KAAK,GAAG,IAAIC,cAAW;IAC9B;AA6CF;AAjDapB;IADZqB,IAAAA,eAAO;;;GACKrB"}
{"version":3,"sources":["../../src/services/transaction.service.ts"],"sourcesContent":["import { Service } from 'typedi';\nimport pg from 'database';\nimport { CustomError } from '@exceptions/CustomError';\nimport { FileUploader } from '@utils/imageStorage';\nimport moment from 'moment';\n@Service()\nexport class TransactionService {\n  public async payForService(customerId: string, serviceId, cardId): Promise<any> {\n    const { rows } = await pg.query(`call pay_for_service($1, $2, $3, null, null, null)`, [customerId, cardId, serviceId]);\n    const { error_code, error_message, payment_id } = rows[0];\n    if (error_code) throw new CustomError(error_code, error_message);\n    return payment_id;\n  }\n  public async transferMoneyToSelf(customerId, fromCardId, toCardId, amount): Promise<any> {\n    const { rows } = await pg.query(`call transfer_money_to_self($1,$2,$3,$4,null,null,null)`, [customerId, fromCardId, toCardId, amount]);\n    const { error_code, error_message, transfer_id } = rows[0];\n    if (error_code) {\n      throw new CustomError(error_code, error_message);\n    }\n    return transfer_id;\n  }\n\n  public async getTransactions(customerId: string, offset: any, fromDate: any, toDate: any, byCardId: any, byServiceId: any): Promise<any> {\n    let transactions;\n    fromDate = moment(fromDate, 'DD/MM/YYYY').startOf('day').add(offset, 'hours').toISOString();\n    toDate = moment(toDate, 'DD/MM/YYYY').endOf('day').add(offset, 'hours').toISOString();\n    const { rows } = await pg.query(\n      `select *\nfrom get_transactions($1, $2, $3, $4, $5)\norder by created_at desc, (type = 'income') desc;`,\n      [customerId, fromDate, toDate, byCardId, byServiceId],\n    );\n    // eslint-disable-next-line prefer-const\n    transactions = rows;\n    transactions.forEach(t => {\n      if (t.sender.image_url) t.sender.image_url = FileUploader.getUrl(t.sender.image_url);\n      if (t.receiver.image_url) t.receiver.image_url = FileUploader.getUrl(t.receiver.image_url);\n    });\n    return transactions;\n  }\n}\n"],"names":["TransactionService","payForService","customerId","serviceId","cardId","rows","pg","query","error_code","error_message","payment_id","CustomError","transferMoneyToSelf","fromCardId","toCardId","amount","transfer_id","getTransactions","offset","fromDate","toDate","byCardId","byServiceId","transactions","moment","startOf","add","toISOString","endOf","forEach","t","sender","image_url","FileUploader","getUrl","receiver","Service"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBANW;iEACT;6BACa;8BACC;+DACV;;;;;;;;;;;;IAENA,qBAAN;IACL,MAAaC,cAAcC,UAAkB,EAAEC,SAAS,EAAEC,MAAM,EAAgB;QAC9E,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,kDAAkD,CAAC,EAAE;YAACL;YAAYE;YAAQD;SAAU;QACrH,MAAM,EAAEK,UAAU,EAAEC,aAAa,EAAEC,UAAU,EAAE,GAAGL,IAAI,CAAC,EAAE;QACzD,IAAIG,YAAY,MAAM,IAAIG,wBAAW,CAACH,YAAYC;QAClD,OAAOC;IACT;IACA,MAAaE,oBAAoBV,UAAU,EAAEW,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAgB;QACvF,MAAM,EAAEV,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,uDAAuD,CAAC,EAAE;YAACL;YAAYW;YAAYC;YAAUC;SAAO;QACrI,MAAM,EAAEP,UAAU,EAAEC,aAAa,EAAEO,WAAW,EAAE,GAAGX,IAAI,CAAC,EAAE;QAC1D,IAAIG,YAAY;YACd,MAAM,IAAIG,wBAAW,CAACH,YAAYC;QACpC;QACA,OAAOO;IACT;IAEA,MAAaC,gBAAgBf,UAAkB,EAAEgB,MAAW,EAAEC,QAAa,EAAEC,MAAW,EAAEC,QAAa,EAAEC,WAAgB,EAAgB;QACvI,IAAIC;QACJJ,WAAWK,IAAAA,eAAM,EAACL,UAAU,cAAcM,OAAO,CAAC,OAAOC,GAAG,CAACR,QAAQ,SAASS,WAAW;QACzFP,SAASI,IAAAA,eAAM,EAACJ,QAAQ,cAAcQ,KAAK,CAAC,OAAOF,GAAG,CAACR,QAAQ,SAASS,WAAW;QACnF,MAAM,EAAEtB,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAC7B,CAAC;;iDAE0C,CAAC,EAC5C;YAACL;YAAYiB;YAAUC;YAAQC;YAAUC;SAAY;QAEvD,wCAAwC;QACxCC,eAAelB;QACfkB,aAAaM,OAAO,CAACC,CAAAA;YACnB,IAAIA,EAAEC,MAAM,CAACC,SAAS,EAAEF,EAAEC,MAAM,CAACC,SAAS,GAAGC,0BAAY,CAACC,MAAM,CAACJ,EAAEC,MAAM,CAACC,SAAS;YACnF,IAAIF,EAAEK,QAAQ,CAACH,SAAS,EAAEF,EAAEK,QAAQ,CAACH,SAAS,GAAGC,0BAAY,CAACC,MAAM,CAACJ,EAAEK,QAAQ,CAACH,SAAS;QAC3F;QACA,OAAOT;IACT;AACF;AAlCavB;IADZoC,IAAAA,eAAO;GACKpC"}
{"version":3,"sources":["../../src/services/transaction.service.ts"],"sourcesContent":["import { Service } from 'typedi';\nimport pg from 'database';\nimport { CustomError } from '@exceptions/CustomError';\nimport { FileUploader } from '@utils/imageStorage';\nimport moment from 'moment';\nimport { Pool } from 'pg';\nimport { POSTGRES_SSL, POSTGRES_URL } from '@config';\n\n@Service()\nexport class TransactionService {\n  function;\n  public async payForService(customerId, serviceId, cardId, amount, fields) {\n    const pool = new Pool({\n      connectionString: POSTGRES_URL,\n      ssl: POSTGRES_SSL === 'true',\n    });\n\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      const cardQuery = 'SELECT * FROM customer_card WHERE id = $1 AND customer_id = $2';\n      const cardResult = await client.query(cardQuery, [cardId, customerId]);\n\n      if (!cardResult.rows[0]) {\n        throw new CustomError('CARD_NOT_FOUND');\n      }\n\n      const card = cardResult.rows[0];\n\n      const serviceQuery = 'SELECT * FROM service WHERE id = $1';\n      const serviceResult = await client.query(serviceQuery, [serviceId]);\n\n      if (!serviceResult.rows[0]) {\n        throw new CustomError('SERVICE_NOT_FOUND');\n      }\n\n      const service = serviceResult.rows[0];\n\n      const merchantQuery = 'SELECT * FROM merchant WHERE id = $1';\n      const merchantResult = await client.query(merchantQuery, [service.merchant_id]);\n      const merchant = merchantResult.rows[0];\n\n      if (card.balance < amount) {\n        throw new CustomError('INSUFFICIENT_FUNDS');\n      }\n\n      await client.query('UPDATE customer_card SET balance = $1 WHERE id = $2', [card.balance - amount, card.id]);\n\n      await client.query('UPDATE merchant SET balance = $1 WHERE id = $2', [parseFloat(merchant.balance) + parseInt(amount), merchant.id]);\n      const paymentQuery = `\n        INSERT INTO payment (owner_id, type, amount, sender_id, receiver_id, fields)\n        VALUES ($1, 'expense', $2, $3, $4, $5) RETURNING id\n      `;\n      const paymentResult = await client.query(paymentQuery, [customerId, amount, card.id, serviceId, JSON.stringify(fields || {})]);\n\n      const merchantPaymentQuery = `\n        INSERT INTO payment (owner_id, type, amount, sender_id, receiver_id, fields)\n        VALUES ($1, 'income', $2, $3, $4, $5)\n      `;\n      await client.query(merchantPaymentQuery, [service.merchant_id, amount, customerId, serviceId, JSON.stringify(fields || {})]);\n\n      const messageQuery = 'SELECT message FROM message WHERE name = $1';\n      const messageResult = await client.query(messageQuery, ['PAYMENT_SUCCESS']);\n      const success_message = messageResult.rows[0].message;\n      await client.query('COMMIT');\n\n      return { success_message, id: paymentResult.rows[0].id };\n    } catch (e) {\n      await client.query('ROLLBACK');\n      throw e;\n    } finally {\n      client.release();\n    }\n  }\n  public async transferMoneyToSelf(customerId, fromCardId, toCardId, amount): Promise<any> {\n    const { rows } = await pg.query(`call transfer_money_to_self($1,$2,$3,$4,null,null,null,null)`, [customerId, fromCardId, toCardId, amount]);\n    const { error_code, error_message, transfer_id, success_message } = rows[0];\n    if (error_code) {\n      throw new CustomError(error_code, error_message);\n    }\n    return { success_message, transfer_id };\n  }\n  public async getTransactions(\n    customerId: string,\n    offset: any,\n    fromDate: any,\n    toDate: any,\n    byCardId: any,\n    byServiceId: any,\n    page,\n    limit,\n  ): Promise<any> {\n    let transactions;\n    fromDate = moment(fromDate, 'DD/MM/YYYY').startOf('day').add(offset, 'hours').toISOString();\n    toDate = moment(toDate, 'DD/MM/YYYY').endOf('day').add(offset, 'hours').toISOString();\n    const { rows } = await pg.query(\n      `select *\n       from get_transactions($1, $2, $3, $4, $5, $6, $7)\n       order by created_at desc, (type = 'income') desc;`,\n      [customerId, fromDate, toDate, page, limit, byCardId, byServiceId],\n    );\n    // eslint-disable-next-line prefer-const\n    transactions = rows;\n    transactions.forEach(t => {\n      if (t.sender.image_url) t.sender.image_url = FileUploader.getUrl(t.sender.image_url);\n      if (t.receiver.image_url) t.receiver.image_url = FileUploader.getUrl(t.receiver.image_url);\n    });\n    return transactions;\n  }\n  public async transferMoney(customerId, fromCardId, toCardPan, amount, lang): Promise<any> {\n    const { rows } = await pg.query(`call transfer_money($1,$2,$3,$4,null,null,null,null)`, [customerId, fromCardId, toCardPan, amount]);\n    const { error_code, error_message, transfer_id, success_message } = rows[0];\n    if (error_code) throw new CustomError(error_code, error_message);\n    const message = success_message[lang];\n    return { transfer_id, message };\n  }\n}\n"],"names":["TransactionService","payForService","customerId","serviceId","cardId","amount","fields","pool","Pool","connectionString","POSTGRES_URL","ssl","POSTGRES_SSL","client","connect","query","cardQuery","cardResult","rows","CustomError","card","serviceQuery","serviceResult","service","merchantQuery","merchantResult","merchant_id","merchant","balance","id","parseFloat","parseInt","paymentQuery","paymentResult","JSON","stringify","merchantPaymentQuery","messageQuery","messageResult","success_message","message","e","release","transferMoneyToSelf","fromCardId","toCardId","pg","error_code","error_message","transfer_id","getTransactions","offset","fromDate","toDate","byCardId","byServiceId","page","limit","transactions","moment","startOf","add","toISOString","endOf","forEach","t","sender","image_url","FileUploader","getUrl","receiver","transferMoney","toCardPan","lang","function","Service"],"mappings":"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"}
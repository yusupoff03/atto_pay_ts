{"version":3,"sources":["../../src/services/cardrequest.service.ts"],"sourcesContent":["import { CARD_SERVICE_PASSWORD, CARD_SERVICE_URL, CARD_SERVICE_USERNAME } from '@config';\nimport axios from 'axios';\nimport { CustomError } from '@exceptions/CustomError';\nimport crypto from 'crypto';\nimport base64url from 'base64url';\n\nexport class CardRequestService {\n  public static async cardNewOtp(pan, expiry, phone) {\n    const params = {\n      card: {\n        pan: `${pan}`,\n        expiry: `${expiry}`,\n        requestorPhone: `${phone}`,\n      },\n    };\n    const response = await this.cardRequest(params, 'cards.new.otp');\n    const error = response.data.error;\n    if (error) {\n      switch (error.code) {\n        case -200:\n          throw new CustomError('CARD_NOT_FOUND');\n          break;\n        case -261:\n          throw new CustomError('CARD_BLOCKED');\n          break;\n        case -270:\n        case -314:\n        case -317:\n          throw new CustomError('EXPIRED_OTP');\n          break;\n        case -269:\n          throw new CustomError('WRONG_OTP');\n          break;\n        case -320:\n          throw new CustomError('CARD_BELONGS_TO_ANOTHER');\n          break;\n        default:\n          throw new CustomError('SVGATE_ERROR');\n          break;\n      }\n    }\n    return response;\n  }\n  public static async CardVerify(id, code) {\n    const params = {\n      otp: {\n        id: id,\n        code: code,\n      },\n    };\n    return await this.cardRequest(params, 'cards.new.verify');\n  }\n  public static async cardPayment(cardToken, amount) {\n    const params = {\n      tran: {\n        purpose: 'payment',\n        cardId: cardToken,\n        amount: amount * 100, // convert to tiyn\n        ext: `SVGATE_${base64url(crypto.randomBytes(32))}`,\n        merchantId: '90126913',\n        terminalId: '91500009',\n      },\n    };\n    const response = await this.cardRequest(params, 'trans.pay.purpose');\n    const error = response.data.error;\n    if (error) {\n      switch (error.code) {\n        case -200:\n          throw new CustomError('CARD_NOT_FOUND');\n          break;\n        case -261:\n          throw new CustomError('CARD_BLOCKED');\n          break;\n        case -270:\n        case -314:\n        case -317:\n          throw new CustomError('EXPIRED_OTP');\n          break;\n        case -269:\n          throw new CustomError('WRONG_OTP');\n          break;\n        case -320:\n          throw new CustomError('CARD_BELONGS_TO_ANOTHER');\n          break;\n        default:\n          throw new CustomError('SVGATE_ERROR');\n          break;\n      }\n    }\n    return response;\n  }\n  private static async cardRequest(params: object, method: string) {\n    const url = `${CARD_SERVICE_URL}`;\n    const username = `${CARD_SERVICE_USERNAME}`;\n    const password = `${CARD_SERVICE_PASSWORD}`;\n    const options = {\n      method: 'POST',\n      url: url,\n      auth: {\n        username,\n        password,\n      },\n      data: {\n        jsonrpc: '2.0',\n        method: method,\n        id: 'afff34abc',\n        params,\n      },\n    };\n    return axios(options);\n  }\n}\n"],"names":["CardRequestService","cardNewOtp","pan","expiry","phone","params","card","requestorPhone","response","cardRequest","error","data","code","CustomError","CardVerify","id","otp","cardPayment","cardToken","amount","tran","purpose","cardId","ext","base64url","crypto","randomBytes","merchantId","terminalId","method","url","CARD_SERVICE_URL","username","CARD_SERVICE_USERNAME","password","CARD_SERVICE_PASSWORD","options","auth","jsonrpc","axios"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBANkE;8DAC7D;6BACU;+DACT;kEACG;;;;;;AAEf,IAAA,AAAMA,qBAAN,MAAMA;IACX,aAAoBC,WAAWC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAE;QACjD,MAAMC,SAAS;YACbC,MAAM;gBACJJ,KAAK,CAAC,EAAEA,IAAI,CAAC;gBACbC,QAAQ,CAAC,EAAEA,OAAO,CAAC;gBACnBI,gBAAgB,CAAC,EAAEH,MAAM,CAAC;YAC5B;QACF;QACA,MAAMI,WAAW,MAAM,IAAI,CAACC,WAAW,CAACJ,QAAQ;QAChD,MAAMK,QAAQF,SAASG,IAAI,CAACD,KAAK;QACjC,IAAIA,OAAO;YACT,OAAQA,MAAME,IAAI;gBAChB,KAAK,CAAC;oBACJ,MAAM,IAAIC,wBAAW,CAAC;oBACtB;gBACF,KAAK,CAAC;oBACJ,MAAM,IAAIA,wBAAW,CAAC;oBACtB;gBACF,KAAK,CAAC;gBACN,KAAK,CAAC;gBACN,KAAK,CAAC;oBACJ,MAAM,IAAIA,wBAAW,CAAC;oBACtB;gBACF,KAAK,CAAC;oBACJ,MAAM,IAAIA,wBAAW,CAAC;oBACtB;gBACF,KAAK,CAAC;oBACJ,MAAM,IAAIA,wBAAW,CAAC;oBACtB;gBACF;oBACE,MAAM,IAAIA,wBAAW,CAAC;oBACtB;YACJ;QACF;QACA,OAAOL;IACT;IACA,aAAoBM,WAAWC,EAAE,EAAEH,IAAI,EAAE;QACvC,MAAMP,SAAS;YACbW,KAAK;gBACHD,IAAIA;gBACJH,MAAMA;YACR;QACF;QACA,OAAO,MAAM,IAAI,CAACH,WAAW,CAACJ,QAAQ;IACxC;IACA,aAAoBY,YAAYC,SAAS,EAAEC,MAAM,EAAE;QACjD,MAAMd,SAAS;YACbe,MAAM;gBACJC,SAAS;gBACTC,QAAQJ;gBACRC,QAAQA,SAAS;gBACjBI,KAAK,CAAC,OAAO,EAAEC,IAAAA,kBAAS,EAACC,eAAM,CAACC,WAAW,CAAC,KAAK,CAAC;gBAClDC,YAAY;gBACZC,YAAY;YACd;QACF;QACA,MAAMpB,WAAW,MAAM,IAAI,CAACC,WAAW,CAACJ,QAAQ;QAChD,MAAMK,QAAQF,SAASG,IAAI,CAACD,KAAK;QACjC,IAAIA,OAAO;YACT,OAAQA,MAAME,IAAI;gBAChB,KAAK,CAAC;oBACJ,MAAM,IAAIC,wBAAW,CAAC;oBACtB;gBACF,KAAK,CAAC;oBACJ,MAAM,IAAIA,wBAAW,CAAC;oBACtB;gBACF,KAAK,CAAC;gBACN,KAAK,CAAC;gBACN,KAAK,CAAC;oBACJ,MAAM,IAAIA,wBAAW,CAAC;oBACtB;gBACF,KAAK,CAAC;oBACJ,MAAM,IAAIA,wBAAW,CAAC;oBACtB;gBACF,KAAK,CAAC;oBACJ,MAAM,IAAIA,wBAAW,CAAC;oBACtB;gBACF;oBACE,MAAM,IAAIA,wBAAW,CAAC;oBACtB;YACJ;QACF;QACA,OAAOL;IACT;IACA,aAAqBC,YAAYJ,MAAc,EAAEwB,MAAc,EAAE;QAC/D,MAAMC,MAAM,CAAC,EAAEC,wBAAgB,CAAC,CAAC;QACjC,MAAMC,WAAW,CAAC,EAAEC,6BAAqB,CAAC,CAAC;QAC3C,MAAMC,WAAW,CAAC,EAAEC,6BAAqB,CAAC,CAAC;QAC3C,MAAMC,UAAU;YACdP,QAAQ;YACRC,KAAKA;YACLO,MAAM;gBACJL;gBACAE;YACF;YACAvB,MAAM;gBACJ2B,SAAS;gBACTT,QAAQA;gBACRd,IAAI;gBACJV;YACF;QACF;QACA,OAAOkC,IAAAA,cAAK,EAACH;IACf;AACF"}
{"version":3,"sources":["../../src/services/cards.service.ts"],"sourcesContent":["import { Service } from 'typedi';\nimport pg from '@database';\nimport { CreateCardDto, CardUpdateDto } from '@dtos/card.dto';\nimport { CustomError } from '@exceptions/CustomError';\n\n@Service()\nexport class CardsService {\n  public async createCard(cardDto: CreateCardDto, customerId: string, lang) {\n    const name = cardDto.name;\n    const pan = cardDto.pan;\n    const owner_name = cardDto.owner_name;\n    const expiry_month: string = cardDto.expiry_month;\n    const expiry_year: string = cardDto.expiry_year;\n    const { rows } = await pg.query(\n      `Select *\nfrom customer_card\nwhere pan = $1`,\n      [pan],\n    );\n    if (rows[0]) {\n      throw new CustomError('CARD_ALREADY_ADDED');\n    }\n    const { rows: cardRows } = await pg.query(\n      `INSERT INTO customer_card( customer_id,name, owner_name,pan, expiry_month, expiry_year)\n       values ($1, $2, $3, $4, $5,$6) returning (select message from message where name = 'CARD_ADDED')`,\n      [customerId, name, owner_name, pan, expiry_month, expiry_year],\n    );\n    return cardRows[0].message[lang];\n  }\n\n  public async getCustomerCards(customerId: string) {\n    const { rows } = await pg.query(`Select *, mask_credit_card(pan) as pan from customer_card where customer_id = $1`, [customerId]);\n    if (!rows[0]) {\n      return [];\n    }\n    return rows;\n  }\n\n  public async updateCard(customerId: string, cardDto: CardUpdateDto) {\n    const { name, id } = cardDto;\n    const { rows } = await pg.query(\n      `UPDATE customer_card\n                                     SET name=$1\n                                     where id = $2\n                                       and customer_id = $3 RETURNING *`,\n      [name, id, customerId],\n    );\n    if (!rows[0]) {\n      throw new CustomError('CARD_NOT_FOUND');\n    }\n    return rows[0];\n  }\n  public async deleteCard(customerId: string, cardId: string) {\n    const { rows } = await pg.query(`Select * from customer_card where id=$1 and customer_id=$2`, [cardId, customerId]);\n    console.log(cardId);\n    console.log(customerId);\n    if (!rows[0]) {\n      throw new CustomError('CARD_NOT_FOUND');\n    }\n    const { rows: error } = await pg.query('call delete_card($1,$2,null,null)', [cardId, customerId]);\n    if (error[0].error_code) {\n      throw new CustomError(error[0].error_code, error[0].error_message);\n    }\n    return true;\n  }\n  public async getOneById(customerId: string, cardId: string) {\n    const { rows } = await pg.query(`Select * from customer_card where id= $1  and customer_id = $2`, [cardId, customerId]);\n    if (!rows[0]) throw new CustomError('CARD_NOT_FOUND');\n\n    return rows[0];\n  }\n\n  public async getOwnerByPan(pan: any) {\n    const { rows } = await pg.query(`Select name from customer where id=(Select customer_id from customer_card  where  pan = $1)`, [pan]);\n    if (!rows[0]) throw new CustomError('CARD_NOT_FOUND');\n    return rows[0];\n  }\n}\n"],"names":["CardsService","createCard","cardDto","customerId","lang","name","pan","owner_name","expiry_month","expiry_year","rows","pg","query","CustomError","cardRows","message","getCustomerCards","updateCard","id","deleteCard","cardId","console","log","error","error_code","error_message","getOneById","getOwnerByPan","Service"],"mappings":"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"}
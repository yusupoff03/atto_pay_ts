{"version":3,"sources":["../../src/services/cards.service.ts"],"sourcesContent":["import { Service } from 'typedi';\nimport pg from '@database';\nimport { CreateCardDto, CardUpdateDto, CardForOtp } from '@dtos/card.dto';\nimport { CustomError } from '@exceptions/CustomError';\nimport { requestCardBalance } from '@/services/test';\nimport { CardRequestService } from '@services/cardrequest.service';\nimport RedisClient from '@/database/redis';\n\n@Service()\nexport class CardsService {\n  private redis: RedisClient;\n  constructor() {\n    this.redis = new RedisClient();\n  }\n  public async createCard(cardDto: CreateCardDto, customerId: string, lang, deviceId: string) {\n    const { rows } = await pg.query(\n      `Select *\nfrom customer_card\nwhere pan = $1`,\n      [cardDto.pan],\n    );\n    if (rows[0]) {\n      throw new CustomError('CARD_ALREADY_ADDED');\n    }\n    const id = await this.redis.hGet('card_otp_id', deviceId);\n    console.log(id);\n    if (!id) {\n      throw new CustomError('WRONG_OTP');\n    }\n    const response = await CardRequestService.CardVerify(id, cardDto.code);\n    if (response.data.error) throw new CustomError('WRONG_OTP');\n    const name = cardDto.name;\n    const pan = response.data.result.pan;\n    const owner_name = cardDto.owner_name;\n    const expiry_month: string = cardDto.expiry_month;\n    const expiry_year: string = cardDto.expiry_year;\n    const balance: number = response.data.result.balance / 100;\n    const card_id = response.data.result.id;\n    const { rows: cardRows } = await pg.query(\n      `INSERT INTO customer_card( customer_id,name, owner_name,pan, expiry_month, expiry_year, balance, verified_id)\n       values ($1, $2, $3, $4, $5,$6,$7,$8) returning (select message from message where name = 'CARD_ADDED')`,\n      [customerId, name, owner_name, pan, expiry_month, expiry_year, balance, card_id],\n    );\n    return cardRows[0].message[lang];\n  }\n  public async newOtp(cardForOtp: CardForOtp, customer_id: string, deviceId: string) {\n    const { rows } = await pg.query('Select * from customer_card where pan=$1', [cardForOtp.pan]);\n    if (rows[0]) throw new CustomError('CARD_BELONGS_TO_ANOTHER');\n    const { rows: user } = await pg.query(`Select * from customer where id = $1`, [customer_id]);\n    if (!user[0]) throw new CustomError('USER_NOT_FOUND');\n    const expiry = `${cardForOtp.expiry_year}${cardForOtp.expiry_month}`;\n    const response = await CardRequestService.cardNewOtp(cardForOtp.pan, expiry, user[0].phone);\n    console.log(response);\n    if (response.data.error) throw new CustomError('CARD_NOT_FOUND');\n    await this.redis.hSet('card_otp_id', deviceId, response.data.result.id);\n  }\n  public async getCustomerCards(customerId: string) {\n    const { rows } = await pg.query(`Select *, mask_credit_card(pan) as pan from customer_card where customer_id = $1`, [customerId]);\n    if (!rows[0]) {\n      return [];\n    }\n    return rows;\n  }\n  public async updateCard(customerId: string, cardDto: CardUpdateDto, lang) {\n    const { name, id } = cardDto;\n    const { rows } = await pg.query(\n      `UPDATE customer_card\n                                     SET name=$1\n                                     where id = $2\n                                       and customer_id = $3 RETURNING (select message from message where name = 'CARD_UPDATED')`,\n      [name, id, customerId],\n    );\n    if (!rows[0]) {\n      throw new CustomError('CARD_NOT_FOUND');\n    }\n    return rows[0].message[lang];\n  }\n  public async deleteCard(customerId: string, cardId: string, lang) {\n    const { rows } = await pg.query(`Select * from customer_card where id=$1 and customer_id=$2`, [cardId, customerId]);\n    if (!rows[0]) {\n      throw new CustomError('CARD_NOT_FOUND');\n    }\n    const { rows: error } = await pg.query('call delete_card($1,$2,null,null)', [cardId, customerId]);\n    if (error[0].error_code) {\n      throw new CustomError(error[0].error_code, error[0].error_message);\n    }\n    const { rows: message } = await pg.query(`Select message from message where name = 'CARD_DELETED'`);\n    return message[0].message[lang];\n  }\n  public async getOneById(customerId: string, cardId: string) {\n    const { rows } = await pg.query(`Select * from customer_card where id= $1  and customer_id = $2`, [cardId, customerId]);\n    if (!rows[0]) throw new CustomError('CARD_NOT_FOUND');\n\n    return rows[0];\n  }\n  public async addTransportCard(card: CreateCardDto, customerId: string, lang): Promise<string> {\n    const pan = card.pan;\n    const expiry_month: string = card.expiry_month;\n    const expiry_year: string = card.expiry_year;\n    const { rows } = await pg.query(\n      `Select *\nfrom customer_card\nwhere pan = $1`,\n      [pan],\n    );\n    if (rows[0]) {\n      throw new CustomError('CARD_ALREADY_ADDED');\n    }\n    const response = await requestCardBalance(pan);\n    const { rows: cardRows } = await pg.query(\n      `INSERT INTO customer_transport_card( customer_id,pan, expiry_month, expiry_year,balance)\n       values ($1, $2, $3, $4,$5) returning (select message from message where name = 'CARD_ADDED')`,\n      [customerId, pan, expiry_month, expiry_year, response.data.data.balance],\n    );\n    return cardRows[0].message[lang];\n  }\n  public async getOwnerByPan(pan: any) {\n    const { rows } = await pg.query(`Select name from customer where id=(Select customer_id from customer_card  where  pan = $1)`, [pan]);\n    if (!rows[0]) throw new CustomError('CARD_NOT_FOUND');\n    return rows[0];\n  }\n}\n"],"names":["CardsService","createCard","cardDto","customerId","lang","deviceId","rows","pg","query","pan","CustomError","id","redis","hGet","console","log","response","CardRequestService","CardVerify","code","data","error","name","result","owner_name","expiry_month","expiry_year","balance","card_id","cardRows","message","newOtp","cardForOtp","customer_id","user","expiry","cardNewOtp","phone","hSet","getCustomerCards","updateCard","deleteCard","cardId","error_code","error_message","getOneById","addTransportCard","card","requestCardBalance","getOwnerByPan","constructor","RedisClient","Service"],"mappings":"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"}
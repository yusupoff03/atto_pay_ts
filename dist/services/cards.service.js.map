{"version":3,"sources":["../../src/services/cards.service.ts"],"sourcesContent":["import { Service } from 'typedi';\nimport pg from '@database';\nimport { CreateCardDto, CardUpdateDto, CardForOtp } from '@dtos/card.dto';\nimport { CustomError } from '@exceptions/CustomError';\nimport { request } from '@/test';\nimport { CardRequestService } from '@services/cardrequest.service';\n\n@Service()\nexport class CardsService {\n  public async createCard(cardDto: CreateCardDto, customerId: string, lang) {\n    const name = cardDto.name;\n    const pan = cardDto.pan;\n    const owner_name = cardDto.owner_name;\n    const expiry_month: string = cardDto.expiry_month;\n    const expiry_year: string = cardDto.expiry_year;\n    const response = await CardRequestService.CardVerify(cardDto.id, cardDto.code);\n    console.log(response);\n    if (response.data.error) throw new CustomError('WRONG_OTP');\n    const { rows } = await pg.query(\n      `Select *\nfrom customer_card\nwhere pan = $1`,\n      [pan],\n    );\n    if (rows[0]) {\n      throw new CustomError('CARD_ALREADY_ADDED');\n    }\n    const { rows: cardRows } = await pg.query(\n      `INSERT INTO customer_card( customer_id,name, owner_name,pan, expiry_month, expiry_year)\n       values ($1, $2, $3, $4, $5,$6) returning (select message from message where name = 'CARD_ADDED')`,\n      [customerId, name, owner_name, pan, expiry_month, expiry_year],\n    );\n    return cardRows[0].message[lang];\n  }\n  public async newOtp(cardForOtp: CardForOtp, lang): Promise<string> {\n    const { rows } = await pg.query('Select * from customer_card where pan=$1', [cardForOtp.pan]);\n    if (rows[0]) throw new CustomError('CARD_BELONGS_TO_ANOTHER');\n    const expiry = `${cardForOtp.expiry_year}${cardForOtp.expiry_month}`;\n    const response = await CardRequestService.cardNewOtp(cardForOtp.pan, expiry);\n    console.log(response);\n    if (response.data.error) throw new CustomError('CARD_NOT_FOUND');\n    return response.data.result.id;\n  }\n  public async getCustomerCards(customerId: string) {\n    const { rows } = await pg.query(`Select *, mask_credit_card(pan) as pan from customer_card where customer_id = $1`, [customerId]);\n    if (!rows[0]) {\n      return [];\n    }\n    return rows;\n  }\n\n  public async updateCard(customerId: string, cardDto: CardUpdateDto, lang) {\n    const { name, id } = cardDto;\n    const { rows } = await pg.query(\n      `UPDATE customer_card\n                                     SET name=$1\n                                     where id = $2\n                                       and customer_id = $3 RETURNING (select message from message where name = 'CARD_UPDATED')`,\n      [name, id, customerId],\n    );\n    if (!rows[0]) {\n      throw new CustomError('CARD_NOT_FOUND');\n    }\n    return rows[0].message[lang];\n  }\n  public async deleteCard(customerId: string, cardId: string, lang) {\n    const { rows } = await pg.query(`Select * from customer_card where id=$1 and customer_id=$2`, [cardId, customerId]);\n    if (!rows[0]) {\n      throw new CustomError('CARD_NOT_FOUND');\n    }\n    const { rows: error } = await pg.query('call delete_card($1,$2,null,null)', [cardId, customerId]);\n    if (error[0].error_code) {\n      throw new CustomError(error[0].error_code, error[0].error_message);\n    }\n    const { rows: message } = await pg.query(`Select message from message where name = 'CARD_DELETED'`);\n    return message[0].message[lang];\n  }\n  public async getOneById(customerId: string, cardId: string) {\n    const { rows } = await pg.query(`Select * from customer_card where id= $1  and customer_id = $2`, [cardId, customerId]);\n    if (!rows[0]) throw new CustomError('CARD_NOT_FOUND');\n\n    return rows[0];\n  }\n  public async addTransportCard(card: CreateCardDto, customerId: string, lang): Promise<string> {\n    const name = card.name;\n    const pan = card.pan;\n    const owner_name = card.owner_name;\n    const expiry_month: string = card.expiry_month;\n    const expiry_year: string = card.expiry_year;\n    const { rows } = await pg.query(\n      `Select *\nfrom customer_card\nwhere pan = $1`,\n      [pan],\n    );\n    if (rows[0]) {\n      throw new CustomError('CARD_ALREADY_ADDED');\n    }\n    const response = await request(pan);\n    const { rows: cardRows } = await pg.query(\n      `INSERT INTO customer_card( customer_id,name, owner_name,pan, expiry_month, expiry_year,balance)\n       values ($1, $2, $3, $4, $5,$6,$7) returning (select message from message where name = 'CARD_ADDED')`,\n      [customerId, name, owner_name, pan, expiry_month, expiry_year, response.data.data.balance],\n    );\n    return cardRows[0].message[lang];\n  }\n\n  public async getOwnerByPan(pan: any) {\n    const { rows } = await pg.query(`Select name from customer where id=(Select customer_id from customer_card  where  pan = $1)`, [pan]);\n    if (!rows[0]) throw new CustomError('CARD_NOT_FOUND');\n    return rows[0];\n  }\n}\n"],"names":["CardsService","createCard","cardDto","customerId","lang","name","pan","owner_name","expiry_month","expiry_year","response","CardRequestService","CardVerify","id","code","console","log","data","error","CustomError","rows","pg","query","cardRows","message","newOtp","cardForOtp","expiry","cardNewOtp","result","getCustomerCards","updateCard","deleteCard","cardId","error_code","error_message","getOneById","addTransportCard","card","request","balance","getOwnerByPan","Service"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARW;iEACT;6BAEa;sBACJ;oCACW;;;;;;;;;;;;IAGtBA,eAAN;IACL,MAAaC,WAAWC,OAAsB,EAAEC,UAAkB,EAAEC,IAAI,EAAE;QACxE,MAAMC,OAAOH,QAAQG,IAAI;QACzB,MAAMC,MAAMJ,QAAQI,GAAG;QACvB,MAAMC,aAAaL,QAAQK,UAAU;QACrC,MAAMC,eAAuBN,QAAQM,YAAY;QACjD,MAAMC,cAAsBP,QAAQO,WAAW;QAC/C,MAAMC,WAAW,MAAMC,sCAAkB,CAACC,UAAU,CAACV,QAAQW,EAAE,EAAEX,QAAQY,IAAI;QAC7EC,QAAQC,GAAG,CAACN;QACZ,IAAIA,SAASO,IAAI,CAACC,KAAK,EAAE,MAAM,IAAIC,wBAAW,CAAC;QAC/C,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAC7B,CAAC;;cAEO,CAAC,EACT;YAAChB;SAAI;QAEP,IAAIc,IAAI,CAAC,EAAE,EAAE;YACX,MAAM,IAAID,wBAAW,CAAC;QACxB;QACA,MAAM,EAAEC,MAAMG,QAAQ,EAAE,GAAG,MAAMF,iBAAE,CAACC,KAAK,CACvC,CAAC;uGACgG,CAAC,EAClG;YAACnB;YAAYE;YAAME;YAAYD;YAAKE;YAAcC;SAAY;QAEhE,OAAOc,QAAQ,CAAC,EAAE,CAACC,OAAO,CAACpB,KAAK;IAClC;IACA,MAAaqB,OAAOC,UAAsB,EAAEtB,IAAI,EAAmB;QACjE,MAAM,EAAEgB,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,4CAA4C;YAACI,WAAWpB,GAAG;SAAC;QAC5F,IAAIc,IAAI,CAAC,EAAE,EAAE,MAAM,IAAID,wBAAW,CAAC;QACnC,MAAMQ,SAAS,CAAC,EAAED,WAAWjB,WAAW,CAAC,EAAEiB,WAAWlB,YAAY,CAAC,CAAC;QACpE,MAAME,WAAW,MAAMC,sCAAkB,CAACiB,UAAU,CAACF,WAAWpB,GAAG,EAAEqB;QACrEZ,QAAQC,GAAG,CAACN;QACZ,IAAIA,SAASO,IAAI,CAACC,KAAK,EAAE,MAAM,IAAIC,wBAAW,CAAC;QAC/C,OAAOT,SAASO,IAAI,CAACY,MAAM,CAAChB,EAAE;IAChC;IACA,MAAaiB,iBAAiB3B,UAAkB,EAAE;QAChD,MAAM,EAAEiB,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,gFAAgF,CAAC,EAAE;YAACnB;SAAW;QAChI,IAAI,CAACiB,IAAI,CAAC,EAAE,EAAE;YACZ,OAAO,EAAE;QACX;QACA,OAAOA;IACT;IAEA,MAAaW,WAAW5B,UAAkB,EAAED,OAAsB,EAAEE,IAAI,EAAE;QACxE,MAAM,EAAEC,IAAI,EAAEQ,EAAE,EAAE,GAAGX;QACrB,MAAM,EAAEkB,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAC7B,CAAC;;;+HAGwH,CAAC,EAC1H;YAACjB;YAAMQ;YAAIV;SAAW;QAExB,IAAI,CAACiB,IAAI,CAAC,EAAE,EAAE;YACZ,MAAM,IAAID,wBAAW,CAAC;QACxB;QACA,OAAOC,IAAI,CAAC,EAAE,CAACI,OAAO,CAACpB,KAAK;IAC9B;IACA,MAAa4B,WAAW7B,UAAkB,EAAE8B,MAAc,EAAE7B,IAAI,EAAE;QAChE,MAAM,EAAEgB,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,0DAA0D,CAAC,EAAE;YAACW;YAAQ9B;SAAW;QAClH,IAAI,CAACiB,IAAI,CAAC,EAAE,EAAE;YACZ,MAAM,IAAID,wBAAW,CAAC;QACxB;QACA,MAAM,EAAEC,MAAMF,KAAK,EAAE,GAAG,MAAMG,iBAAE,CAACC,KAAK,CAAC,qCAAqC;YAACW;YAAQ9B;SAAW;QAChG,IAAIe,KAAK,CAAC,EAAE,CAACgB,UAAU,EAAE;YACvB,MAAM,IAAIf,wBAAW,CAACD,KAAK,CAAC,EAAE,CAACgB,UAAU,EAAEhB,KAAK,CAAC,EAAE,CAACiB,aAAa;QACnE;QACA,MAAM,EAAEf,MAAMI,OAAO,EAAE,GAAG,MAAMH,iBAAE,CAACC,KAAK,CAAC,CAAC,uDAAuD,CAAC;QAClG,OAAOE,OAAO,CAAC,EAAE,CAACA,OAAO,CAACpB,KAAK;IACjC;IACA,MAAagC,WAAWjC,UAAkB,EAAE8B,MAAc,EAAE;QAC1D,MAAM,EAAEb,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,8DAA8D,CAAC,EAAE;YAACW;YAAQ9B;SAAW;QACtH,IAAI,CAACiB,IAAI,CAAC,EAAE,EAAE,MAAM,IAAID,wBAAW,CAAC;QAEpC,OAAOC,IAAI,CAAC,EAAE;IAChB;IACA,MAAaiB,iBAAiBC,IAAmB,EAAEnC,UAAkB,EAAEC,IAAI,EAAmB;QAC5F,MAAMC,OAAOiC,KAAKjC,IAAI;QACtB,MAAMC,MAAMgC,KAAKhC,GAAG;QACpB,MAAMC,aAAa+B,KAAK/B,UAAU;QAClC,MAAMC,eAAuB8B,KAAK9B,YAAY;QAC9C,MAAMC,cAAsB6B,KAAK7B,WAAW;QAC5C,MAAM,EAAEW,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAC7B,CAAC;;cAEO,CAAC,EACT;YAAChB;SAAI;QAEP,IAAIc,IAAI,CAAC,EAAE,EAAE;YACX,MAAM,IAAID,wBAAW,CAAC;QACxB;QACA,MAAMT,WAAW,MAAM6B,IAAAA,aAAO,EAACjC;QAC/B,MAAM,EAAEc,MAAMG,QAAQ,EAAE,GAAG,MAAMF,iBAAE,CAACC,KAAK,CACvC,CAAC;0GACmG,CAAC,EACrG;YAACnB;YAAYE;YAAME;YAAYD;YAAKE;YAAcC;YAAaC,SAASO,IAAI,CAACA,IAAI,CAACuB,OAAO;SAAC;QAE5F,OAAOjB,QAAQ,CAAC,EAAE,CAACC,OAAO,CAACpB,KAAK;IAClC;IAEA,MAAaqC,cAAcnC,GAAQ,EAAE;QACnC,MAAM,EAAEc,IAAI,EAAE,GAAG,MAAMC,iBAAE,CAACC,KAAK,CAAC,CAAC,2FAA2F,CAAC,EAAE;YAAChB;SAAI;QACpI,IAAI,CAACc,IAAI,CAAC,EAAE,EAAE,MAAM,IAAID,wBAAW,CAAC;QACpC,OAAOC,IAAI,CAAC,EAAE;IAChB;AACF;AAxGapB;IADZ0C,IAAAA,eAAO;GACK1C"}
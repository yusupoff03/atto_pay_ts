{"version":3,"sources":["../../src/services/service.service.ts"],"sourcesContent":["import { Service } from 'typedi';\nimport pg from '@database';\nimport { ServiceInterface, ServiceUpdate } from '@interfaces/service.interface';\nimport { FileUploader } from '@utils/imageStorage';\nimport { CustomError } from '@exceptions/CustomError';\n@Service()\nexport class ServiceService {\n  private fileUploader;\n  constructor() {\n    this.fileUploader = new FileUploader('eu-north-1', 'image-24');\n  }\n  public async createService(serviceData: ServiceInterface, lang: any, image?: any): Promise<ServiceInterface> {\n    const { name, price, merchant_id, categoryId, isActive } = serviceData;\n    const { rows } = await pg.query(`Select * from service where merchant_id=$1 and category_id=$2 and deleted = false`, [merchant_id, categoryId]);\n    if (rows[0]) throw new CustomError('SERVICE_ALREADY_EXISTS');\n    const newActive = isActive || false;\n    const { rows: service } = await pg.query(\n      `INSERT INTO service(name,price,merchant_id,category_id,is_active) values ($1,$2,$3,$4,$5) RETURNING (select message from message where name = 'SERVICE_CREATED')`,\n      [name, price, merchant_id, categoryId, newActive],\n    );\n    if (image) {\n      const uploadPath = await this.fileUploader.uploadFile(image, `${service[0].id}.${image.name.split('.').pop()}`);\n      if (uploadPath) await pg.query(`Update service set image_url = $1 where id = $2`, [uploadPath, service[0].id]);\n    }\n    if (service[0]) {\n      return service[0].message[lang];\n    }\n    throw new CustomError('DATABASE_ERROR');\n  }\n  public async getMerchantServices(merchantId: string, lang: any): Promise<ServiceInterface[]> {\n    const { rows } = await pg.query(\n      `\nselect s.id, s.merchant_id, s.category_id, s.name, s.price, s.image_url, s.is_active,\n  c.code as category_code, c.name -> $1 as category_name\nfrom service s\nJOIN service_category c on s.category_id = c.id\nwhere merchant_id = $2 and deleted = false`,\n      [lang, merchantId],\n    );\n    if (!rows[0]) {\n      return [];\n    }\n    const services = rows;\n    services.forEach(service => {\n      service.image_url = FileUploader.getUrl(service.image_url);\n    });\n    return services;\n  }\n  public async getAllServices(lang: any, customerId): Promise<ServiceInterface[]> {\n    const services: ServiceInterface[] = [];\n    const { rows } = await pg.query(\n      `select s.id, s.merchant_id, s.category_id, s.name, s.price, s.image_url,\n      c.code as category_code, c.name -> $1 as category_name\n    from service s\n    JOIN service_category c on s.category_id = c.id\n    where is_active = true and deleted = false`,\n      [lang],\n    );\n    if (!rows[0]) return [];\n    rows.forEach(service => {\n      service.image_url = FileUploader.getUrl(service.image_url);\n      services.push(service);\n    });\n    const { rows: saved } = await pg.query(`Select * from customer_saved_service where customer_id =$1`, [customerId]);\n    if (saved[0]) {\n      services.forEach(service => {\n        saved.forEach(save => {\n          if (service.id === save.service_id && save.customer_id === customerId) {\n            service.saved = true;\n          }\n        });\n      });\n    }\n    console.log(services);\n    return services;\n  }\n  public async getOneById(merchantId, serviceId, lang): Promise<any> {\n    const { rows } = await pg.query(\n      `\nselect s.*, c.code as category_code, c.name -> $3 as category_name\nfrom service s\nJOIN service_category c on s.category_id = c.id\nwhere s.id = $1 and s.merchant_id = $2 and s.deleted = false`,\n      [serviceId, merchantId, lang],\n    );\n    if (!rows[0]) throw new CustomError('SERVICE_NOT_FOUND');\n    rows[0].image_url = FileUploader.getUrl(rows[0].image_url);\n    return rows[0];\n  }\n  public async deleteOneById(merchantId, serviceId, lang): Promise<any> {\n    const { rows } = await pg.query(`Select * from service where id = $1 and merchant_id = $2`, [serviceId, merchantId]);\n    if (!rows[0]) throw new CustomError('SERVICE_NOT_FOUND');\n    const { rows: message } = await pg.query(\n      `update service\n                    set is_active = false,\n                        deleted   = true\n                    where id = $1\n                      and merchant_id = $2\n                      and deleted = false returning (select message from message where name = 'SERVICE_DELETED')`,\n      [serviceId, merchantId],\n    );\n    return message[lang];\n  }\n  public async updateService(merchantId, service: ServiceUpdate, image?: any): Promise<void> {\n    const { rows } = await pg.query(`Select * from service where merchant_id = $1 and id = $2`, [merchantId, service.id]);\n    if (!rows[0]) throw new CustomError('SERVICE_NOT_FOUND');\n\n    const name = service.name || rows[0].name;\n    const categoryId = service.categoryId || rows[0].category_id;\n    const price = service.price || rows[0].price;\n    const isActive = service.isActive || rows[0].is_active;\n    console.log(rows[0].image_url);\n    if (image || service.deleteImage) {\n      await this.fileUploader.deleteFile(`${rows[0].image_url}`);\n      if (image) {\n        const uploadPath = await this.fileUploader.uploadFile(image, `${rows[0].id}.${image.name.split('.').pop()}`);\n        await pg.query(`Update service set image_url = $1 where id = $2`, [uploadPath, service.id]);\n      } else {\n        await pg.query(`Update service set image_url = $1 where id = $2`, [null, service.id]);\n      }\n    }\n    await pg.query(`Update service set name = $1, price = $2, category_id = $3,is_active = $4 where id = $5`, [\n      name,\n      price,\n      categoryId,\n      isActive,\n      service.id,\n    ]);\n  }\n}\n"],"names":["ServiceService","createService","serviceData","lang","image","name","price","merchant_id","categoryId","isActive","rows","pg","query","CustomError","newActive","service","uploadPath","fileUploader","uploadFile","id","split","pop","message","getMerchantServices","merchantId","services","forEach","image_url","FileUploader","getUrl","getAllServices","customerId","push","saved","save","service_id","customer_id","console","log","getOneById","serviceId","deleteOneById","updateService","category_id","is_active","deleteImage","deleteFile","constructor","Service"],"mappings":"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"}
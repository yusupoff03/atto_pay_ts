{"version":3,"sources":["../../src/services/service.service.ts"],"sourcesContent":["import { Service } from 'typedi';\nimport pg from '@database';\nimport { ServiceInterface, ServiceUpdate } from '@interfaces/service.interface';\nimport { FileUploader } from '@utils/imageStorage';\nimport { CustomError } from '@exceptions/CustomError';\nimport base64url from 'base64url';\nimport * as crypto from 'crypto';\n\n@Service()\nexport class ServiceService {\n  private fileUploader;\n  constructor() {\n    this.fileUploader = new FileUploader('eu-north-1', 'image-24');\n  }\n  public async createService(serviceData: ServiceInterface, lang: any, image?: any): Promise<ServiceInterface> {\n    const { name, merchant_id, categoryId, isActive } = serviceData;\n    const { rows } = await pg.query(`Select * from service where merchant_id=$1 and category_id=$2 and deleted = false`, [merchant_id, categoryId]);\n    if (rows[0]) throw new CustomError('SERVICE_ALREADY_EXISTS');\n    const newActive = isActive || false;\n    const public_key = base64url(crypto.randomBytes(16));\n    const { rows: services } = await pg.query(`call create_service($1, $2, $3, $4, $5, $6, null, null, null)`, [\n      merchant_id,\n      categoryId,\n      name,\n      newActive,\n      public_key,\n      serviceData.fields,\n    ]);\n    const { error_code, error_message, success_message } = services[0];\n    if (error_code) throw new CustomError(error_code, error_message);\n    const { rows: created } = await pg.query(`Select * from service where merchant_id = $1 and category_id=$2 and deleted = false`, [\n      merchant_id,\n      categoryId,\n    ]);\n    console.log(created);\n    const service = created[0];\n    console.log(service);\n    if (image) {\n      const uploadPath = await this.fileUploader.uploadFile(image, `${service.id}.${image.name.split('.').pop()}`);\n      if (uploadPath) await pg.query(`Update service set image_url = $1 where id = $2`, [uploadPath, service.id]);\n    }\n    if (services[0]) {\n      return success_message[lang];\n    }\n    throw new CustomError('DATABASE_ERROR');\n  }\n  public async getMerchantServices(merchantId: string, lang: any): Promise<ServiceInterface[]> {\n    const { rows } = await pg.query(\n      `\n        select s.id, s.merchant_id, s.category_id, s.name, s.image_url, s.is_active,\n               c.code as category_code, c.name -> $1 as category_name\n        from service s\n               JOIN service_category c on s.category_id = c.id\n        where merchant_id = $2 and deleted = false`,\n      [lang, merchantId],\n    );\n    if (!rows[0]) {\n      return [];\n    }\n    const services = rows;\n    services.forEach(service => {\n      service.image_url = FileUploader.getUrl(service.image_url);\n    });\n    return services;\n  }\n  public async getAllServices(lang: any, customerId): Promise<ServiceInterface[]> {\n    const services: ServiceInterface[] = [];\n    const { rows } = await pg.query(\n      `select s.id, s.merchant_id, s.category_id, s.name, s.image_url,\n              c.code as category_code, c.name -> $1 as category_name\n       from service s\n              JOIN service_category c on s.category_id = c.id\n       where is_active = true and deleted = false`,\n      [lang],\n    );\n    if (!rows[0]) return [];\n    rows.forEach(service => {\n      service.image_url = FileUploader.getUrl(service.image_url);\n      services.push(service);\n    });\n    const { rows: saved } = await pg.query(\n      `select service_id as id\n                                            from customer_saved_service\n                                            where customer_id = $1`,\n      [customerId],\n    );\n    if (saved[0]) {\n      services.forEach(service => {\n        saved.forEach(save => {\n          if (service.id === save.id) {\n            service.saved = true;\n          }\n        });\n      });\n    }\n    return services;\n  }\n  public async getOneById(merchantId, serviceId, lang): Promise<any> {\n    const { rows } = await pg.query(\n      `\n        select s.id, s.merchant_id, s.category_id, s.name, s.image_url, s.is_active, s.public_key,\n               c.code as category_code, c.name -> $3 as category_name,\n               (select json_agg(\n                         json_build_object('id', f.id, 'name', f.name, 'type', f.type, 'order', f.order_num)\n                         ) from service_field f where f.service_id = s.id) as fields\n        from service s\n               JOIN service_category c on s.category_id = c.id\n        where s.id = $1 and s.merchant_id = $2 and s.deleted = false`,\n      [serviceId, merchantId, lang],\n    );\n    if (!rows[0]) throw new CustomError('SERVICE_NOT_FOUND');\n    rows[0].image_url = FileUploader.getUrl(rows[0].image_url);\n    return rows[0];\n  }\n  public async deleteOneById(merchantId, serviceId, lang): Promise<any> {\n    const { rows } = await pg.query(`Select * from service where id = $1 and merchant_id = $2`, [serviceId, merchantId]);\n    if (!rows[0]) throw new CustomError('SERVICE_NOT_FOUND');\n    const { rows: message } = await pg.query(\n      `update service\n                    set is_active = false,\n                        deleted   = true\n                    where id = $1\n                      and merchant_id = $2\n                      and deleted = false returning (select message from message where name = 'SERVICE_DELETED')`,\n      [serviceId, merchantId],\n    );\n    return message[lang];\n  }\n  public async updateService(merchantId, service: ServiceUpdate, lang, image?: any): Promise<any> {\n    const { rows } = await pg.query(`Select * from service where merchant_id = $1 and id = $2`, [merchantId, service.id]);\n    if (!rows[0]) throw new CustomError('SERVICE_NOT_FOUND');\n\n    const name = service.name || rows[0].name;\n    const categoryId = service.categoryId || rows[0].category_id;\n    const isActive = service.isActive || rows[0].is_active;\n    if (image || service.deleteImage) {\n      await this.fileUploader.deleteFile(`${rows[0].image_url}`);\n      if (image) {\n        const uploadPath = await this.fileUploader.uploadFile(image, `${rows[0].id}.${image.name.split('.').pop()}`);\n        await pg.query(`Update service set image_url = $1 where id = $2`, [uploadPath, service.id]);\n      } else {\n        await pg.query(`Update service set image_url = $1 where id = $2`, [null, service.id]);\n      }\n    }\n    const { rows: message } = await pg.query(\n      `Update service set name = $1, category_id = $2,is_active = $3 where id = $4 returning (select message from message where name = 'SERVICE_UPDATED')`,\n      [name, categoryId, isActive, service.id],\n    );\n    return message[0].message[lang];\n  }\n  public async getOneByQr(key): Promise<any> {\n    const { rows } = await pg.query(`Select id, is_active from service where public_key = $1`, [key]);\n    if (!rows[0]) throw new CustomError('SERVICE_NOT_FOUND');\n    if (!rows[0].is_active) throw new CustomError('SERVICE_NOT_ACTIVE');\n    console.log(rows[0].id);\n    return rows[0].id;\n  }\n  public async getOnePublicById(id, lang): Promise<any> {\n    const { rows } = await pg.query(\n      `select s.id, s.merchant_id, s.category_id, s.name, s.image_url,\n              c.code as category_code, c.name -> $2 as category_name,\n              (select json_agg(\n                        json_build_object('id', f.id, 'name', f.name, 'type', f.type, 'order', f.order_num)\n                        ) from service_field f where f.service_id = s.id) as fields\n       from service s\n              JOIN service_category c on s.category_id = c.id\n       where s.id = $1 and s.deleted = false and s.is_active = true`,\n      [id, lang],\n    );\n    if (!rows[0]) throw new CustomError('SERVICE_NOT_FOUND');\n    rows[0].image_url = FileUploader.getUrl(rows[0].image_url);\n    return rows[0];\n  }\n}\n"],"names":["ServiceService","createService","serviceData","lang","image","name","merchant_id","categoryId","isActive","rows","pg","query","CustomError","newActive","public_key","base64url","crypto","randomBytes","services","fields","error_code","error_message","success_message","created","console","log","service","uploadPath","fileUploader","uploadFile","id","split","pop","getMerchantServices","merchantId","forEach","image_url","FileUploader","getUrl","getAllServices","customerId","push","saved","save","getOneById","serviceId","deleteOneById","message","updateService","category_id","is_active","deleteImage","deleteFile","getOneByQr","key","getOnePublicById","constructor","Service"],"mappings":"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"}
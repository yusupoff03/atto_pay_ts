{"version":3,"sources":["../../src/middlewares/auth.middleware.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { CustomError } from '@exceptions/CustomError';\n\nconst getAuthorization = req => {\n  const cookie = req.headers.authorization;\n  if (cookie) return cookie;\n  return null;\n};\n\nexport const AuthMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const Authorization = getAuthorization(req);\n\n    if (Authorization) {\n      const { id } = (await verify(Authorization, SECRET_KEY)) as DataStoredInToken;\n      if (id) {\n        next();\n      } else {\n        next(new CustomError('MISSING_TOKEN'));\n      }\n    } else {\n      next(new CustomError('MISSING_TOKEN'));\n    }\n  } catch (error) {\n    next(new CustomError('MISSING_TOKEN'));\n  }\n};\n"],"names":["AuthMiddleware","getAuthorization","req","cookie","headers","authorization","res","next","Authorization","id","verify","SECRET_KEY","CustomError","error"],"mappings":";;;;+BAYaA;;;eAAAA;;;8BAXU;wBACI;6BAEC;AAE5B,MAAMC,mBAAmBC,CAAAA;IACvB,MAAMC,SAASD,IAAIE,OAAO,CAACC,aAAa;IACxC,IAAIF,QAAQ,OAAOA;IACnB,OAAO;AACT;AAEO,MAAMH,iBAAiB,OAAOE,KAAcI,KAAeC;IAChE,IAAI;QACF,MAAMC,gBAAgBP,iBAAiBC;QAEvC,IAAIM,eAAe;YACjB,MAAM,EAAEC,EAAE,EAAE,GAAI,MAAMC,IAAAA,oBAAM,EAACF,eAAeG,kBAAU;YACtD,IAAIF,IAAI;gBACNF;YACF,OAAO;gBACLA,KAAK,IAAIK,wBAAW,CAAC;YACvB;QACF,OAAO;YACLL,KAAK,IAAIK,wBAAW,CAAC;QACvB;IACF,EAAE,OAAOC,OAAO;QACdN,KAAK,IAAIK,wBAAW,CAAC;IACvB;AACF"}
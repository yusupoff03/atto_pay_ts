{"version":3,"sources":["../../src/socket/qrLogin.ts"],"sourcesContent":["import crypto from 'crypto';\nimport base64url from 'base64url';\nimport moment from 'moment';\nimport { RedisClient } from '../database/redis';\nimport { Validator } from 'livr';\nimport { CustomError } from '@exceptions/CustomError';\nexport async function qrLoginRequest(socket) {\n  const redis = new RedisClient();\n  const deviceId = socket.handshake.headers.deviceid;\n\n  const validator = new Validator({\n    deviceId: ['required', 'string'],\n  });\n\n  const validData = validator.validate({ deviceId });\n  if (!validData) throw new CustomError(validator.getErrors());\n\n  const key = base64url(crypto.randomBytes(32));\n  const body = {\n    key,\n    expiresAt: moment().add(2, 'minutes').toISOString(),\n    socketId: socket.id,\n  };\n\n  await redis.hSet('qr_login', deviceId, JSON.stringify(body));\n\n  socket.emit('qr_login_response', { key, deviceId });\n}\n"],"names":["qrLoginRequest","socket","redis","RedisClient","deviceId","handshake","headers","deviceid","validator","Validator","validData","validate","CustomError","getErrors","key","base64url","crypto","randomBytes","body","expiresAt","moment","add","toISOString","socketId","id","hSet","JSON","stringify","emit"],"mappings":";;;;+BAMsBA;;;eAAAA;;;+DANH;kEACG;+DACH;uBACS;sBACF;6BACE;;;;;;AACrB,eAAeA,eAAeC,MAAM;IACzC,MAAMC,QAAQ,IAAIC,kBAAW;IAC7B,MAAMC,WAAWH,OAAOI,SAAS,CAACC,OAAO,CAACC,QAAQ;IAElD,MAAMC,YAAY,IAAIC,eAAS,CAAC;QAC9BL,UAAU;YAAC;YAAY;SAAS;IAClC;IAEA,MAAMM,YAAYF,UAAUG,QAAQ,CAAC;QAAEP;IAAS;IAChD,IAAI,CAACM,WAAW,MAAM,IAAIE,wBAAW,CAACJ,UAAUK,SAAS;IAEzD,MAAMC,MAAMC,IAAAA,kBAAS,EAACC,eAAM,CAACC,WAAW,CAAC;IACzC,MAAMC,OAAO;QACXJ;QACAK,WAAWC,IAAAA,eAAM,IAAGC,GAAG,CAAC,GAAG,WAAWC,WAAW;QACjDC,UAAUtB,OAAOuB,EAAE;IACrB;IAEA,MAAMtB,MAAMuB,IAAI,CAAC,YAAYrB,UAAUsB,KAAKC,SAAS,CAACT;IAEtDjB,OAAO2B,IAAI,CAAC,qBAAqB;QAAEd;QAAKV;IAAS;AACnD"}
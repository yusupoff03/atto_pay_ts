{"version":3,"sources":["../../src/test/users.test.ts"],"sourcesContent":["// import request from 'supertest';\n// import { App } from '@/app';\n// import pg from '@database';\n// import { CreateCustomerDto } from '@dtos/customer.dto';\n// import { CustomersRoute } from '@routes/customers.route';\n//\n// afterAll(async () => {\n//   await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n//   pg.end();\n// });\n//\n// describe('Testing Customers', () => {\n//   describe('[GET] /customer', () => {\n//     it('response statusCode 200 / findAll', async () => {\n//       const customerRoute = new CustomersRoute();\n//       const app = new App([customerRoute]);\n//\n//       return await request(app.getServer()).get(`${customerRoute.path}`).expect(200);\n//     });\n//   });\n//\n//   describe('[GET] /customer/:id', () => {\n//     it('response statusCode 200 / findOne', async () => {\n//       const customerRoute = new CustomersRoute();\n//       const app = new App([customerRoute]);\n//\n//       return await request(app.getServer())\n//         .get(`${customerRoute.path}`)\n//         .query({\n//           userId: 1,\n//         })\n//         .expect(200);\n//     });\n//   });\n//\n//   describe('[POST] /customer', () => {\n//     it('response statusCode 201 / created', async () => {\n//       const userData: CreateCustomerDto = {\n//         phone: 'example@email.com',\n//         password: 'password',\n//       };\n//       const customerRoute = new CustomersRoute();\n//       const app = new App([customerRoute]);\n//\n//       return await request(app.getServer()).post(`${customerRoute.path}`).send(userData).expect(201);\n//     });\n//   });\n//\n//   describe('[PUT] /customer/:id', () => {\n//     it('response statusCode 200 / updated', async () => {\n//       const userId = 1;\n//       const userData: CreateCustomerDto = {\n//         phone: 'example@email.com',\n//         password: 'password',\n//       };\n//       const customerRoute = new CustomersRoute();\n//       const app = new App([customerRoute]);\n//\n//       return await request(app.getServer()).put(`${customerRoute.path}/${userId}`).send(userData).expect(200);\n//     });\n//   });\n//\n//   describe('[DELETE] /customer/:id', () => {\n//     it('response statusCode 200 / deleted', async () => {\n//       const userId = 1;\n//       const customerRoute = new CustomersRoute();\n//       const app = new App([customerRoute]);\n//\n//       return await request(app.getServer()).delete(`${customerRoute.path}/${userId}`).expect(200);\n//     });\n//   });\n// });\n"],"names":[],"mappings":"AAAA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B,0DAA0D;AAC1D,4DAA4D;AAC5D,EAAE;AACF,yBAAyB;AACzB,0EAA0E;AAC1E,cAAc;AACd,MAAM;AACN,EAAE;AACF,wCAAwC;AACxC,wCAAwC;AACxC,4DAA4D;AAC5D,oDAAoD;AACpD,8CAA8C;AAC9C,EAAE;AACF,wFAAwF;AACxF,UAAU;AACV,QAAQ;AACR,EAAE;AACF,4CAA4C;AAC5C,4DAA4D;AAC5D,oDAAoD;AACpD,8CAA8C;AAC9C,EAAE;AACF,8CAA8C;AAC9C,wCAAwC;AACxC,mBAAmB;AACnB,uBAAuB;AACvB,aAAa;AACb,wBAAwB;AACxB,UAAU;AACV,QAAQ;AACR,EAAE;AACF,yCAAyC;AACzC,4DAA4D;AAC5D,8CAA8C;AAC9C,sCAAsC;AACtC,gCAAgC;AAChC,WAAW;AACX,oDAAoD;AACpD,8CAA8C;AAC9C,EAAE;AACF,wGAAwG;AACxG,UAAU;AACV,QAAQ;AACR,EAAE;AACF,4CAA4C;AAC5C,4DAA4D;AAC5D,0BAA0B;AAC1B,8CAA8C;AAC9C,sCAAsC;AACtC,gCAAgC;AAChC,WAAW;AACX,oDAAoD;AACpD,8CAA8C;AAC9C,EAAE;AACF,iHAAiH;AACjH,UAAU;AACV,QAAQ;AACR,EAAE;AACF,+CAA+C;AAC/C,4DAA4D;AAC5D,0BAA0B;AAC1B,oDAAoD;AACpD,8CAA8C;AAC9C,EAAE;AACF,qGAAqG;AACrG,UAAU;AACV,QAAQ;AACR,MAAM"}
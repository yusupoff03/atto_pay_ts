{"version":3,"sources":["../../src/controllers/transaction.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { Container } from 'typedi';\nimport { TransactionService } from '@services/transaction.service';\n\nexport class TransactionController {\n  public transaction = Container.get(TransactionService);\n\n  public pay = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { serviceId, fromCardId, amount, fields } = req.body;\n      const customerId = await this.getCustomerId(req);\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const { success_message, id } = await this.transaction.payForService(customerId, serviceId, fromCardId, amount, fields);\n      const message = success_message[lang];\n      console.log(success_message);\n      res.status(200).json({\n        success: true,\n        id,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public transferToSelf = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = await this.getCustomerId(req);\n      const { fromCardId, toCardId, amount } = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const { success_message, transferId } = await this.transaction.transferMoneyToSelf(customerId, fromCardId, toCardId, amount);\n      const message = success_message[lang];\n      res.status(200).json({\n        success: true,\n        transferId,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public transferMoney = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = await this.getCustomerId(req);\n      const { toCardPan, fromCardId, amount } = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const { transfer_id, message } = await this.transaction.transferMoney(customerId, fromCardId, toCardPan, amount, lang);\n      res.status(200).json({ success: true, transfer_id, message });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getCustomerTransactions = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = await this.getCustomerId(req);\n      const { offset, fromDate, toDate, byCardId = null, byServiceId = null, page, limit } = req.body;\n      const transactions = await this.transaction.getTransactions(customerId, offset, fromDate, toDate, byCardId, byServiceId, page, limit);\n      res.status(200).json({ length: transactions.length, transactions });\n    } catch (error) {\n      next(error);\n    }\n  };\n  private getCustomerId = async (req: Request): Promise<string> => {\n    const cookie = req.headers.authorization;\n    const decodedToken = verify(cookie, SECRET_KEY) as DataStoredInToken;\n    return decodedToken.id;\n  };\n}\n"],"names":["TransactionController","transaction","Container","get","TransactionService","pay","req","res","next","serviceId","fromCardId","amount","fields","body","customerId","getCustomerId","lang","acceptsLanguages","success_message","id","payForService","message","console","log","status","json","success","error","transferToSelf","toCardId","transferId","transferMoneyToSelf","transferMoney","toCardPan","transfer_id","getCustomerTransactions","offset","fromDate","toDate","byCardId","byServiceId","page","limit","transactions","getTransactions","length","cookie","headers","authorization","decodedToken","verify","SECRET_KEY"],"mappings":"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"}
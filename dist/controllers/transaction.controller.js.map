{"version":3,"sources":["../../src/controllers/transaction.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { Container } from 'typedi';\nimport { TransactionService } from '@services/transaction.service';\n\nexport class TransactionController {\n  public transaction = Container.get(TransactionService);\n\n  public pay = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { serviceId, fromCardId } = req.body;\n      const customerId = await this.getCustomerId(req);\n      const paymentId = await this.transaction.payForService(customerId, serviceId, fromCardId);\n      res.status(200).json({\n        success: true,\n        paymentId,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public transferToSelf = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = await this.getCustomerId(req);\n      const { fromCardId, toCardId, amount } = req.body;\n      const transferId = await this.transaction.transferMoneyToSelf(customerId, fromCardId, toCardId, amount);\n      res.status(200).json({\n        success: true,\n        transferId,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getCustomerTransactions = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = await this.getCustomerId(req);\n      const { offset, fromDate, toDate, byCardId = null, byServiceId = null } = req.body;\n      const transactions = await this.transaction.getTransactions(customerId, offset, fromDate, toDate, byCardId, byServiceId);\n      res.status(200).json({ length: transactions.length, transactions });\n    } catch (error) {\n      next(error);\n    }\n  };\n  private getCustomerId = async (req: Request): Promise<string> => {\n    const cookie = req.headers.authorization;\n    const decodedToken = verify(cookie, SECRET_KEY) as DataStoredInToken;\n    return decodedToken.id;\n  };\n}\n"],"names":["TransactionController","transaction","Container","get","TransactionService","pay","req","res","next","serviceId","fromCardId","body","customerId","getCustomerId","paymentId","payForService","status","json","success","error","transferToSelf","toCardId","amount","transferId","transferMoneyToSelf","getCustomerTransactions","offset","fromDate","toDate","byCardId","byServiceId","transactions","getTransactions","length","cookie","headers","authorization","decodedToken","verify","SECRET_KEY","id"],"mappings":";;;;+BAOaA;;;eAAAA;;;8BANU;wBACI;wBAED;oCACS;;;;;;;;;;;;;;AAE5B,IAAA,AAAMA,wBAAN,MAAMA;;QACX,uBAAOC,eAAcC,iBAAS,CAACC,GAAG,CAACC,sCAAkB;QAErD,uBAAOC,OAAM,OAAOC,KAAcC,KAAeC;YAC/C,IAAI;gBACF,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAE,GAAGJ,IAAIK,IAAI;gBAC1C,MAAMC,aAAa,MAAM,IAAI,CAACC,aAAa,CAACP;gBAC5C,MAAMQ,YAAY,MAAM,IAAI,CAACb,WAAW,CAACc,aAAa,CAACH,YAAYH,WAAWC;gBAC9EH,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAAC;oBACnBC,SAAS;oBACTJ;gBACF;YACF,EAAE,OAAOK,OAAO;gBACdX,KAAKW;YACP;QACF;QACA,uBAAOC,kBAAiB,OAAOd,KAAcC,KAAeC;YAC1D,IAAI;gBACF,MAAMI,aAAa,MAAM,IAAI,CAACC,aAAa,CAACP;gBAC5C,MAAM,EAAEI,UAAU,EAAEW,QAAQ,EAAEC,MAAM,EAAE,GAAGhB,IAAIK,IAAI;gBACjD,MAAMY,aAAa,MAAM,IAAI,CAACtB,WAAW,CAACuB,mBAAmB,CAACZ,YAAYF,YAAYW,UAAUC;gBAChGf,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAAC;oBACnBC,SAAS;oBACTK;gBACF;YACF,EAAE,OAAOJ,OAAO;gBACdX,KAAKW;YACP;QACF;QACA,uBAAOM,2BAA0B,OAAOnB,KAAcC,KAAeC;YACnE,IAAI;gBACF,MAAMI,aAAa,MAAM,IAAI,CAACC,aAAa,CAACP;gBAC5C,MAAM,EAAEoB,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,IAAI,EAAEC,cAAc,IAAI,EAAE,GAAGxB,IAAIK,IAAI;gBAClF,MAAMoB,eAAe,MAAM,IAAI,CAAC9B,WAAW,CAAC+B,eAAe,CAACpB,YAAYc,QAAQC,UAAUC,QAAQC,UAAUC;gBAC5GvB,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEgB,QAAQF,aAAaE,MAAM;oBAAEF;gBAAa;YACnE,EAAE,OAAOZ,OAAO;gBACdX,KAAKW;YACP;QACF;QACA,uBAAQN,iBAAgB,OAAOP;YAC7B,MAAM4B,SAAS5B,IAAI6B,OAAO,CAACC,aAAa;YACxC,MAAMC,eAAeC,IAAAA,oBAAM,EAACJ,QAAQK,kBAAU;YAC9C,OAAOF,aAAaG,EAAE;QACxB;;AACF"}
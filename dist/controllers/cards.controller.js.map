{"version":3,"sources":["../../src/controllers/cards.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { CardsService } from '@services/cards.service';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { verify } from 'jsonwebtoken';\nimport { CreateCardDto, CardUpdateDto, CardForOtp } from '@dtos/card.dto';\nimport { Customer } from '@interfaces/customers.interface';\nimport { SECRET_KEY } from '@config';\nimport { Card } from '@interfaces/cards.interface';\n\nexport class CardsController {\n  public card = Container.get(CardsService);\n  public createCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const cardDto: CreateCardDto = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const message = await this.card.createCard(cardDto, customerId, lang);\n      res.status(201).json({\n        success: true,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public newOtp = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const cardForOtp: CardForOtp = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const message = await this.card.newOtp(cardForOtp, lang);\n      res.status(200).json({\n        success: true,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getCustomerCards = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customer_id = this.getCustomerId(req);\n      const cards: Card[] = await this.card.getCustomerCards(String(customer_id));\n      res.status(201).json({ cards, count: cards.length });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const cardUpdateDto: CardUpdateDto = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const message = await this.card.updateCard(String(customerId), cardUpdateDto, lang);\n      res.status(201).json({ success: true, message });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public deleteCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { id } = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const message = await this.card.deleteCard(String(customerId), id, lang);\n      res.status(202).json({ success: true, message });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOneById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { id } = req.params;\n      const card: Card = await this.card.getOneById(customerId, id);\n      res.status(200).json(card);\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOwnerByPan = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { pan } = req.body;\n      const owner = await this.card.getOwnerByPan(pan);\n      res.status(200).json({ owner });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public addTransportCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const card: CreateCardDto = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const message = await this.card.addTransportCard(card, customerId, lang);\n      res.status(201).json({\n        success: true,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  private getCustomerId = (req: Request): string => {\n    const cookie = req.headers.authorization;\n    const decodedToken = verify(cookie, SECRET_KEY) as DataStoredInToken;\n    return String(decodedToken.id);\n  };\n}\n"],"names":["CardsController","card","Container","get","CardsService","createCard","req","res","next","customerId","getCustomerId","cardDto","body","lang","acceptsLanguages","message","status","json","success","error","newOtp","cardForOtp","getCustomerCards","customer_id","cards","String","count","length","updateCard","cardUpdateDto","deleteCard","id","getOneById","params","getOwnerByPan","pan","owner","addTransportCard","cookie","headers","authorization","decodedToken","verify","SECRET_KEY"],"mappings":"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"}
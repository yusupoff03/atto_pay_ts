{"version":3,"sources":["../../src/controllers/cards.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { CardsService } from '@services/cards.service';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { verify } from 'jsonwebtoken';\nimport { CreateCardDto, CardUpdateDto } from '@dtos/card.dto';\nimport { Customer } from '@interfaces/customers.interface';\nimport { SECRET_KEY } from '@config';\nimport { Card } from '@interfaces/cards.interface';\n\nexport class CardsController {\n  public card = Container.get(CardsService);\n  public createCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const cardDto: CreateCardDto = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const message = await this.card.createCard(cardDto, customerId, lang);\n      res.status(201).json({\n        success: true,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getCustomerCards = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customer_id = this.getCustomerId(req);\n      const cards: Card[] = await this.card.getCustomerCards(String(customer_id));\n      res.status(201).json({ cards, length: cards.length });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const cardUpdateDto: CardUpdateDto = req.body;\n      const card: Card = await this.card.updateCard(String(customerId), cardUpdateDto);\n      res.status(201).json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public deleteCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { id } = req.body;\n      const deleteCard: boolean = await this.card.deleteCard(String(customerId), id);\n\n      res.status(202).json({ success: deleteCard, message: 'Card deleted' });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOneById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { id } = req.params;\n      const card: Card = await this.card.getOneById(customerId, id);\n      res.status(200).json(card);\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOwnerByPan = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { pan } = req.body;\n      const owner = await this.card.getOwnerByPan(pan);\n      res.status(200).json({ owner });\n    } catch (error) {\n      next(error);\n    }\n  };\n  private getCustomerId = (req: Request): string => {\n    const cookie = req.headers.authorization;\n    const token = cookie.replace(/\"/g, '');\n    const decodedToken = verify(token, SECRET_KEY) as DataStoredInToken;\n    return String(decodedToken.id);\n  };\n}\n"],"names":["CardsController","card","Container","get","CardsService","createCard","req","res","next","customerId","getCustomerId","cardDto","body","lang","acceptsLanguages","message","status","json","success","error","getCustomerCards","customer_id","cards","String","length","updateCard","cardUpdateDto","deleteCard","id","getOneById","params","getOwnerByPan","pan","owner","cookie","headers","authorization","token","replace","decodedToken","verify","SECRET_KEY"],"mappings":"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"}
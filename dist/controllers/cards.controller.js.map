{"version":3,"sources":["../../src/controllers/cards.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { CardsService } from '@services/cards.service';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { verify } from 'jsonwebtoken';\nimport { CreateCardDto, CardUpdateDto, CardForOtp } from '@dtos/card.dto';\nimport { SECRET_KEY } from '@config';\nimport { Card } from '@interfaces/cards.interface';\nexport class CardsController {\n  public card = Container.get(CardsService);\n  public createCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const cardDto: CreateCardDto = req.body;\n      let message = '';\n      const deviceId = req.headers['x-device-id'];\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      if (cardDto.pan.startsWith('9987')) {\n        message = await this.card.addTransportCard(cardDto, customerId, lang);\n      } else {\n        message = await this.card.createCard(cardDto, customerId, lang, JSON.stringify(deviceId));\n      }\n      res.status(201).json({\n        success: true,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public newOtp = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const cardForOtp: CardForOtp = req.body;\n      const deviceId = req.headers['x-device-id'];\n      const message = await this.card.newOtp(cardForOtp, customerId, JSON.stringify(deviceId));\n      res.status(200).json({\n        success: true,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getCustomerCards = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customer_id = this.getCustomerId(req);\n      const cards: Card[] = await this.card.getCustomerCards(String(customer_id));\n      res.status(201).json({ cards, count: cards.length });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const cardUpdateDto: CardUpdateDto = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const message = await this.card.updateCard(String(customerId), cardUpdateDto, lang);\n      res.status(201).json({ success: true, message });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public deleteCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { id } = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const message = await this.card.deleteCard(String(customerId), id, lang);\n      res.status(202).json({ success: true, message });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOneById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { id } = req.params;\n      const card: Card = await this.card.getOneById(customerId, id);\n      res.status(200).json(card);\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOwnerByPan = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { pan } = req.body;\n      const owner = await this.card.getOwnerByPan(pan);\n      res.status(200).json({ owner });\n    } catch (error) {\n      next(error);\n    }\n  };\n  private getCustomerId = (req: Request): string => {\n    const cookie = req.headers.authorization;\n    const decodedToken = verify(cookie, SECRET_KEY) as DataStoredInToken;\n    return String(decodedToken.id);\n  };\n}\n"],"names":["CardsController","card","Container","get","CardsService","createCard","req","res","next","customerId","getCustomerId","cardDto","body","message","deviceId","headers","lang","acceptsLanguages","pan","startsWith","addTransportCard","JSON","stringify","status","json","success","error","newOtp","cardForOtp","getCustomerCards","customer_id","cards","String","count","length","updateCard","cardUpdateDto","deleteCard","id","getOneById","params","getOwnerByPan","owner","cookie","authorization","decodedToken","verify","SECRET_KEY"],"mappings":"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"}
{"version":3,"sources":["../../src/controllers/customers.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { Customer, UpdateCustomerData } from '@interfaces/customers.interface';\nimport { CustomerService } from '@services/customers.service';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { POSTGRES_DB, SECRET_KEY } from '@config';\nimport { verify } from 'jsonwebtoken';\nimport { FileUploader } from '@utils/imageStorage';\n\nexport class CustomersController {\n  public customer = Container.get(CustomerService);\n\n  public getCustomers = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const findAllCustomersData: Customer[] = await this.customer.findAllCustomer();\n\n      res.status(200).json({ data: findAllCustomersData, message: 'findAll' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getCustomerById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const customer: Customer = await this.customer.findCustomerById(customerId);\n      customer.image_url = FileUploader.getUrl(customer.image_url);\n      res.status(200).json(customer);\n    } catch (error) {\n      next(error);\n    }\n  };\n  public addServiceToSaved = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { serviceId } = req.body;\n      await this.customer.addToSaved(customerId, serviceId);\n      res.status(200).json({\n        success: true,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public deleteServiceFromSaved = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { serviceId } = req.body;\n      await this.customer.deleteFromSaved(customerId, serviceId);\n      res.status(200).json({\n        success: true,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateCustomer = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerData: UpdateCustomerData = req.body;\n      const customerId = this.getCustomerId(req);\n      const updateCustomerData: Customer = await this.customer.updateCustomer(customerId, customerData, req.files?.avatar);\n      res.status(200).json({ data: updateCustomerData, message: 'updated' });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateCustomerLang = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { lang } = req.body;\n      await this.customer.updateCustomerLang(customerId, lang);\n      res.status(200).json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public deleteCustomer = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const cookie = req.cookies['Authorization'];\n      const { customerId } = req.body;\n      console.log(customerId);\n      const decodedToken = verify(cookie, SECRET_KEY) as DataStoredInToken;\n      const customerId2 = decodedToken.id;\n      if (customerId !== customerId2) {\n        res.status(401).json({\n          message: `Unexpected token`,\n        });\n        return;\n      }\n      const deleteCustomerData: boolean = await this.customer.deleteCustomer(customerId);\n      res.status(200).json({ data: deleteCustomerData, message: 'deleted' });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOtp = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { phone } = req.body;\n      const otp = await this.customer.getOtp(phone);\n      res.status(200).json({\n        otp: otp,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  private getCustomerId = (req: Request): string => {\n    const cookie = req.headers.authorization;\n    const decodedToken = verify(cookie, SECRET_KEY) as DataStoredInToken;\n    return decodedToken.id;\n  };\n}\n"],"names":["CustomersController","customer","Container","get","CustomerService","getCustomers","req","res","next","findAllCustomersData","findAllCustomer","status","json","data","message","error","getCustomerById","customerId","getCustomerId","findCustomerById","image_url","FileUploader","getUrl","addServiceToSaved","serviceId","body","addToSaved","success","deleteServiceFromSaved","deleteFromSaved","updateCustomer","customerData","updateCustomerData","files","avatar","updateCustomerLang","lang","deleteCustomer","cookie","cookies","console","log","decodedToken","verify","SECRET_KEY","customerId2","id","deleteCustomerData","getOtp","phone","otp","headers","authorization"],"mappings":"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"}
{"version":3,"sources":["../../src/controllers/customers.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { Customer, UpdateCustomerData } from '@interfaces/customers.interface';\nimport { CustomerService } from '@services/customers.service';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { SECRET_KEY } from '@config';\nimport { verify } from 'jsonwebtoken';\nimport { FileUploader } from '@utils/imageStorage';\nimport { LoginQr, VerifyDto } from '@dtos/customer.dto';\n\nexport class CustomersController {\n  public customer = Container.get(CustomerService);\n  public loginWithQr = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const qrLogin: LoginQr = req.body;\n      const customerId = this.getCustomerId(req);\n      await this.customer.loginWithQr(qrLogin, customerId);\n      res.status(200).json({\n        success: true,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getCustomerById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const customer: Customer = await this.customer.findCustomerById(customerId);\n      customer.image_url = FileUploader.getUrl(customer.image_url);\n      res.status(200).json(customer);\n    } catch (error) {\n      next(error);\n    }\n  };\n  public addServiceToSaved = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { serviceId: id } = req.body;\n      await this.customer.addToSaved(customerId, id);\n      res.status(200).json({\n        success: true,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public deleteServiceFromSaved = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { serviceId } = req.body;\n      await this.customer.deleteFromSaved(customerId, serviceId);\n      res.status(200).json({\n        success: true,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateCustomer = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerData: UpdateCustomerData = req.body;\n      const customerId = this.getCustomerId(req);\n      const updateCustomerData: Customer = await this.customer.updateCustomer(customerId, customerData, req.files?.avatar);\n      res.status(200).json({ data: updateCustomerData, message: 'updated' });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateCustomerLang = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const { lang } = req.body;\n      await this.customer.updateCustomerLang(customerId, lang);\n      res.status(200).json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public deleteCustomer = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const cookie = req.cookies['Authorization'];\n      const { customerId } = req.body;\n      console.log(customerId);\n      const decodedToken = verify(cookie, SECRET_KEY) as DataStoredInToken;\n      const customerId2 = decodedToken.id;\n      if (customerId !== customerId2) {\n        res.status(401).json({\n          message: `Unexpected token`,\n        });\n        return;\n      }\n      const deleteCustomerData: boolean = await this.customer.deleteCustomer(customerId);\n      res.status(200).json({ data: deleteCustomerData, message: 'deleted' });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOtp = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { phone } = req.body;\n      const otp = await this.customer.getOtp(phone);\n      res.status(200).json({\n        otp: otp,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getDevices = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerId = this.getCustomerId(req);\n      const rows = await this.customer.getDevices(customerId);\n      res.status(200).json({\n        success: true,\n        rows,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public deleteCustomerDevice = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const deviceId = req.headers['x-device-id'];\n      const customerId = this.getCustomerId(req);\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      console.log(deviceId);\n      const message: string = await this.customer.deleteCustomerDevice(deviceId, customerId, lang);\n      res.status(200).json({\n        success: true,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public sendCodeToPhone = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const deviceId = req.headers['x-device-id'];\n      const verify: VerifyDto = req.body;\n      await this.customer.sendCodeToPhone(verify, deviceId, true);\n      res.status(200).json({\n        success: true,\n        timeLeft: 120,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  private getCustomerId = (req: Request): string => {\n    const cookie = req.headers.authorization;\n    const decodedToken = verify(cookie, SECRET_KEY) as DataStoredInToken;\n    return decodedToken.id;\n  };\n}\n"],"names":["CustomersController","customer","Container","get","CustomerService","loginWithQr","req","res","next","qrLogin","body","customerId","getCustomerId","status","json","success","error","getCustomerById","findCustomerById","image_url","FileUploader","getUrl","addServiceToSaved","serviceId","id","addToSaved","deleteServiceFromSaved","deleteFromSaved","updateCustomer","customerData","updateCustomerData","files","avatar","data","message","updateCustomerLang","lang","deleteCustomer","cookie","cookies","console","log","decodedToken","verify","SECRET_KEY","customerId2","deleteCustomerData","getOtp","phone","otp","getDevices","rows","deleteCustomerDevice","deviceId","headers","acceptsLanguages","sendCodeToPhone","timeLeft","authorization"],"mappings":"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"}
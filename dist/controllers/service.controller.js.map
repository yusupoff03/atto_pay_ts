{"version":3,"sources":["../../src/controllers/service.controller.ts"],"sourcesContent":["import { verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { HttpException } from '@exceptions/httpException';\nimport { ServiceService } from '@services/service.service';\nimport { Container } from 'typedi';\nimport { NextFunction, Request, Response } from 'express';\nimport { ServiceInterface, ServiceUpdate } from '@interfaces/service.interface';\n\nexport class ServiceController {\n  public service = Container.get(ServiceService);\n\n  public getMerchantServices = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      const lang = req.acceptsLanguages();\n      const services = await this.service.getMerchantServices(merchantId, lang);\n      res.status(200).json({\n        count: services.length,\n        services,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public deleteOneById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      const serviceId = req.body.id;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const message = await this.service.deleteOneById(merchantId, serviceId, lang);\n      res.status(200).json({\n        success: true,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public createService = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      const service: ServiceInterface = req.body;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      service.merchant_id = merchantId;\n      const message = await this.service.createService(service, lang, req.files?.image);\n      res.status(201).json({\n        success: true,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getAllServices = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const customerId = await this.getCustomerId(req);\n      const services: ServiceInterface[] = await this.service.getAllServices(lang, customerId);\n      res.status(200).json({\n        count: services.length,\n        services,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOneById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      const id = req.params.id;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const service: ServiceInterface = await this.service.getOneById(merchantId, id, lang);\n      res.status(200).json(service);\n    } catch (error) {\n      next(error);\n    }\n  };\n  public editService = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const serviceUpdate: ServiceUpdate = req.body;\n      const message = await this.service.updateService(merchantId, serviceUpdate, lang, req.files?.image);\n      res.status(200).json({\n        success: true,\n        message,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOneByQR = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { key } = req.params;\n      const id = await this.service.getOneByQr(key);\n      res.status(200).json({ id: id });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getOnePublicById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { id } = req.params;\n      const lang = req.acceptsLanguages('en', 'ru', 'uz') || 'en';\n      const service = await this.service.getOnePublicById(id, lang);\n      res.status(200).json(service);\n    } catch (error) {\n      next(error);\n    }\n  };\n  private getMerchantId = async (req: Request): Promise<string> => {\n    const token: string = req.headers.authorization;\n    const decodedToken = verify(token, SECRET_KEY) as DataStoredInToken;\n    if (decodedToken.role) {\n      return String(decodedToken.id);\n    }\n    throw new HttpException(403, 'You dont have access to this recourse');\n  };\n  private getCustomerId = async (req: Request): Promise<string> => {\n    const cookie = req.headers.authorization;\n    const decodedToken = verify(cookie, SECRET_KEY) as DataStoredInToken;\n    return decodedToken.id;\n  };\n}\n"],"names":["ServiceController","service","Container","get","ServiceService","getMerchantServices","req","res","next","merchantId","getMerchantId","lang","acceptsLanguages","services","status","json","count","length","error","deleteOneById","serviceId","body","id","message","success","createService","merchant_id","files","image","getAllServices","customerId","getCustomerId","getOneById","params","editService","serviceUpdate","updateService","getOneByQR","key","getOneByQr","getOnePublicById","token","headers","authorization","decodedToken","verify","SECRET_KEY","role","String","HttpException","cookie"],"mappings":"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"}
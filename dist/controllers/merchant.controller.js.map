{"version":3,"sources":["../../src/controllers/merchant.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { Merchant } from '@interfaces/merchant.interface';\nimport { MerchantService } from '@services/merchant.service';\nimport { verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { CustomError } from '@exceptions/CustomError';\n\nexport class MerchantController {\n  public merchant = Container.get(MerchantService);\n  public getMerchantProfile = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      const merchant: Merchant = await this.merchant.getMerchantById(merchantId);\n      delete merchant.hashed_password;\n      res.status(200).json(merchant);\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateMerchant = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      const { name } = req.body;\n      const updateMerchantData = await this.merchant.updateMerchant(merchantId, name);\n      res.status(200).json({\n        data: updateMerchantData,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateMerchantLang = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      const { lang } = req.body;\n      await this.merchant.updateMerchantLang(merchantId, lang);\n      res.status(200).json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  };\n  private getMerchantId = async (req: Request): Promise<string> => {\n    const token: string = req.headers.authorization;\n    const decodedToken = verify(token, SECRET_KEY) as DataStoredInToken;\n    if (decodedToken.role) {\n      return String(decodedToken.id);\n    }\n    throw new CustomError('MISSING_TOKEN');\n  };\n}\n"],"names":["MerchantController","merchant","Container","get","MerchantService","getMerchantProfile","req","res","next","merchantId","getMerchantId","getMerchantById","hashed_password","status","json","error","updateMerchant","name","body","updateMerchantData","data","updateMerchantLang","lang","success","token","headers","authorization","decodedToken","verify","SECRET_KEY","role","String","id","CustomError"],"mappings":";;;;+BASaA;;;eAAAA;;;wBARa;iCAEM;8BACT;wBACI;6BAEC;;;;;;;;;;;;;;AAErB,IAAA,AAAMA,qBAAN,MAAMA;;QACX,uBAAOC,YAAWC,iBAAS,CAACC,GAAG,CAACC,gCAAe;QAC/C,uBAAOC,sBAAqB,OAAOC,KAAcC,KAAeC;YAC9D,IAAI;gBACF,MAAMC,aAAa,MAAM,IAAI,CAACC,aAAa,CAACJ;gBAC5C,MAAML,WAAqB,MAAM,IAAI,CAACA,QAAQ,CAACU,eAAe,CAACF;gBAC/D,OAAOR,SAASW,eAAe;gBAC/BL,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAACb;YACvB,EAAE,OAAOc,OAAO;gBACdP,KAAKO;YACP;QACF;QACA,uBAAOC,kBAAiB,OAAOV,KAAcC,KAAeC;YAC1D,IAAI;gBACF,MAAMC,aAAa,MAAM,IAAI,CAACC,aAAa,CAACJ;gBAC5C,MAAM,EAAEW,IAAI,EAAE,GAAGX,IAAIY,IAAI;gBACzB,MAAMC,qBAAqB,MAAM,IAAI,CAAClB,QAAQ,CAACe,cAAc,CAACP,YAAYQ;gBAC1EV,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBACnBM,MAAMD;gBACR;YACF,EAAE,OAAOJ,OAAO;gBACdP,KAAKO;YACP;QACF;QACA,uBAAOM,sBAAqB,OAAOf,KAAcC,KAAeC;YAC9D,IAAI;gBACF,MAAMC,aAAa,MAAM,IAAI,CAACC,aAAa,CAACJ;gBAC5C,MAAM,EAAEgB,IAAI,EAAE,GAAGhB,IAAIY,IAAI;gBACzB,MAAM,IAAI,CAACjB,QAAQ,CAACoB,kBAAkB,CAACZ,YAAYa;gBACnDf,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAES,SAAS;gBAAK;YACvC,EAAE,OAAOR,OAAO;gBACdP,KAAKO;YACP;QACF;QACA,uBAAQL,iBAAgB,OAAOJ;YAC7B,MAAMkB,QAAgBlB,IAAImB,OAAO,CAACC,aAAa;YAC/C,MAAMC,eAAeC,IAAAA,oBAAM,EAACJ,OAAOK,kBAAU;YAC7C,IAAIF,aAAaG,IAAI,EAAE;gBACrB,OAAOC,OAAOJ,aAAaK,EAAE;YAC/B;YACA,MAAM,IAAIC,wBAAW,CAAC;QACxB;;AACF"}
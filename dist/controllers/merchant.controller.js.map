{"version":3,"sources":["../../src/controllers/merchant.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { Merchant } from '@interfaces/merchant.interface';\nimport { MerchantService } from '@services/merchant.service';\nimport { verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { DataStoredInToken } from '@interfaces/auth.interface';\nimport { HttpException } from '@exceptions/httpException';\n\nexport class MerchantController {\n  public merchant = Container.get(MerchantService);\n\n  public getMerchantProfile = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      console.log(merchantId);\n      const merchant: Merchant = await this.merchant.getMerchantById(merchantId);\n      delete merchant.hashed_password;\n      res.status(200).json(merchant);\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateMerchant = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      const { name, password } = req.body;\n      const updateMerchantData = await this.merchant.updateMerchant(merchantId, name, password);\n      res.status(200).json({\n        data: updateMerchantData,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public updateMerchantLang = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantId = await this.getMerchantId(req);\n      const { lang } = req.body;\n      await this.merchant.updateMerchantLang(merchantId, lang);\n      res.status(200).json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  private getMerchantId = async (req: Request): Promise<string> => {\n    const token: string = req.headers.authorization;\n    console.log(token);\n    // const token: string = cookie.replace(/\"/g, '');\n    const decodedToken = verify(token, SECRET_KEY) as DataStoredInToken;\n    if (decodedToken.role) {\n      return String(decodedToken.id);\n    }\n    throw new HttpException(403, 'You dont have access to this recourse');\n  };\n}\n"],"names":["MerchantController","merchant","Container","get","MerchantService","getMerchantProfile","req","res","next","merchantId","getMerchantId","console","log","getMerchantById","hashed_password","status","json","error","updateMerchant","name","password","body","updateMerchantData","data","updateMerchantLang","lang","success","token","headers","authorization","decodedToken","verify","SECRET_KEY","role","String","id","HttpException"],"mappings":";;;;+BASaA;;;eAAAA;;;wBARa;iCAEM;8BACT;wBACI;+BAEG;;;;;;;;;;;;;;AAEvB,IAAA,AAAMA,qBAAN,MAAMA;;QACX,uBAAOC,YAAWC,iBAAS,CAACC,GAAG,CAACC,gCAAe;QAE/C,uBAAOC,sBAAqB,OAAOC,KAAcC,KAAeC;YAC9D,IAAI;gBACF,MAAMC,aAAa,MAAM,IAAI,CAACC,aAAa,CAACJ;gBAC5CK,QAAQC,GAAG,CAACH;gBACZ,MAAMR,WAAqB,MAAM,IAAI,CAACA,QAAQ,CAACY,eAAe,CAACJ;gBAC/D,OAAOR,SAASa,eAAe;gBAC/BP,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAACf;YACvB,EAAE,OAAOgB,OAAO;gBACdT,KAAKS;YACP;QACF;QACA,uBAAOC,kBAAiB,OAAOZ,KAAcC,KAAeC;YAC1D,IAAI;gBACF,MAAMC,aAAa,MAAM,IAAI,CAACC,aAAa,CAACJ;gBAC5C,MAAM,EAAEa,IAAI,EAAEC,QAAQ,EAAE,GAAGd,IAAIe,IAAI;gBACnC,MAAMC,qBAAqB,MAAM,IAAI,CAACrB,QAAQ,CAACiB,cAAc,CAACT,YAAYU,MAAMC;gBAChFb,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAAC;oBACnBO,MAAMD;gBACR;YACF,EAAE,OAAOL,OAAO;gBACdT,KAAKS;YACP;QACF;QACA,uBAAOO,sBAAqB,OAAOlB,KAAcC,KAAeC;YAC9D,IAAI;gBACF,MAAMC,aAAa,MAAM,IAAI,CAACC,aAAa,CAACJ;gBAC5C,MAAM,EAAEmB,IAAI,EAAE,GAAGnB,IAAIe,IAAI;gBACzB,MAAM,IAAI,CAACpB,QAAQ,CAACuB,kBAAkB,CAACf,YAAYgB;gBACnDlB,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEU,SAAS;gBAAK;YACvC,EAAE,OAAOT,OAAO;gBACdT,KAAKS;YACP;QACF;QAEA,uBAAQP,iBAAgB,OAAOJ;YAC7B,MAAMqB,QAAgBrB,IAAIsB,OAAO,CAACC,aAAa;YAC/ClB,QAAQC,GAAG,CAACe;YACZ,kDAAkD;YAClD,MAAMG,eAAeC,IAAAA,oBAAM,EAACJ,OAAOK,kBAAU;YAC7C,IAAIF,aAAaG,IAAI,EAAE;gBACrB,OAAOC,OAAOJ,aAAaK,EAAE;YAC/B;YACA,MAAM,IAAIC,4BAAa,CAAC,KAAK;QAC/B;;AACF"}
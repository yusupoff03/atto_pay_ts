{"version":3,"sources":["../../src/controllers/auth.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { RequestWithCustomer } from '@interfaces/auth.interface';\nimport { Customer, CustomerLogin } from '@interfaces/customers.interface';\nimport { AuthService } from '@services/auth.service';\nimport { Merchant } from '@interfaces/merchant.interface';\nimport { HttpException } from '@exceptions/httpException';\n\nexport class AuthController {\n  public auth = Container.get(AuthService);\n\n  public signUp = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerData: Customer = req.body;\n      const trust: boolean = req.body.trust || false;\n      const uid: string = req.headers['x-device-id'] as string;\n      const { cookie, token, customer } = await this.auth.signup(customerData, trust, uid);\n      res.setHeader('Set-Cookie', [cookie]);\n      res.status(201).json({ token: token, data: customer, message: 'signup' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public logIn = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerData: CustomerLogin = req.body;\n      const deviceId: string = req.headers['x-device-id'] as string;\n      const { tokenData, findCustomer } = await this.auth.login(customerData, deviceId);\n      res.status(200).json({ token: tokenData.token, data: findCustomer, message: 'login' });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getCustomerLoginType = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { phone } = req.body;\n      const deviceId = req.headers['x-device-id'] as string;\n      if (!phone) {\n        throw new HttpException(400, 'Phone required');\n      }\n      const { password, otp } = await this.auth.getLoginType(phone, deviceId);\n      res.status(200).json({\n        password: password,\n        otp: otp,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public logOut = async (req: RequestWithCustomer, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerData: Customer = req.customer;\n      const logOutCustomerData: Customer = await this.auth.logout(customerData);\n      res.status(200).json({ data: logOutCustomerData, message: 'logout' });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public signUpMerchant = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantData: Merchant = req.body;\n      const { cookie, tokenData, merchant } = await this.auth.signUpMerchant(merchantData);\n      res.setHeader('Set-Cookie', [cookie]);\n      res.status(201).json({ token: tokenData.token, data: merchant });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public loginMerchant = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantData: Merchant = req.body;\n      const { merchant, cookie, tokenData } = await this.auth.loginMerchant(merchantData);\n      res.setHeader('Set-Cookie', cookie);\n      res.status(200).json({ token: tokenData.token, merchant: merchant });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n"],"names":["AuthController","auth","Container","get","AuthService","signUp","req","res","next","customerData","body","trust","uid","headers","cookie","token","customer","signup","setHeader","status","json","data","message","error","logIn","deviceId","tokenData","findCustomer","login","getCustomerLoginType","phone","HttpException","password","otp","getLoginType","logOut","logOutCustomerData","logout","signUpMerchant","merchantData","merchant","loginMerchant"],"mappings":"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"}
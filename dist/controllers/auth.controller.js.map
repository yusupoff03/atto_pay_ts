{"version":3,"sources":["../../src/controllers/auth.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { RequestWithCustomer } from '@interfaces/auth.interface';\nimport { Customer, CustomerLogin } from '@interfaces/customers.interface';\nimport { AuthService } from '@services/auth.service';\nimport { Merchant } from '@interfaces/merchant.interface';\nimport { CustomerService } from '@services/customers.service';\n\nexport class AuthController {\n  public auth = Container.get(AuthService);\n\n  public signUp = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerData: Customer = req.body;\n      const trust: boolean = req.body.trust || false;\n      const uid: string = req.headers['x-device-id'] as string;\n      const info: string = await CustomerService.getDeviceInfo(req);\n      const { token, customer } = await this.auth.signup(customerData, info, trust, uid);\n      res.status(201).json({ token: token, data: customer, message: 'signup' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public logIn = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerData: CustomerLogin = req.body;\n      const deviceId: string = req.headers['x-device-id'] as string;\n      const deviceInfo = await CustomerService.getDeviceInfo(req);\n      const { tokenData, findCustomer } = await this.auth.login(customerData, deviceId, deviceInfo);\n      res.status(200).json({ token: tokenData.token, data: findCustomer, message: 'login' });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public getCustomerLoginType = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { phone } = req.body;\n      const deviceId = req.headers['x-device-id'] as string;\n      const { password, otp, timeLeft } = await this.auth.getLoginType(phone, deviceId);\n      res.status(200).json({\n        password: password,\n        otp: otp,\n        timeLeft: timeLeft,\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public logOut = async (req: RequestWithCustomer, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const customerData: Customer = req.customer;\n      const logOutCustomerData: Customer = await this.auth.logout(customerData);\n      res.status(200).json({ data: logOutCustomerData, message: 'logout' });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public signUpMerchant = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const merchantData: Merchant = req.body;\n      const newEmail = merchantData.email.toLowerCase();\n      const { otp } = req.body;\n      const { tokenData, merchant } = await this.auth.signUpMerchant(merchantData, newEmail, otp);\n      res.status(201).json({ token: tokenData.token, data: merchant });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public sendCode = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { email, resend } = req.body;\n      const newEmail = email.toLowerCase();\n      const timeLeft = await this.auth.sendCode(newEmail, resend);\n      console.log(timeLeft);\n      res.status(200).json({ success: true, timeLeft: timeLeft });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public loginMerchant = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { email, password } = req.body;\n      const newEmail = email.toLowerCase();\n      const deviceId = req.headers['x-device-id'] as string;\n      const { merchant, tokenData } = await this.auth.loginMerchant(newEmail, password, deviceId);\n      res.status(200).json({ token: tokenData.token, merchant: merchant });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n"],"names":["AuthController","auth","Container","get","AuthService","signUp","req","res","next","customerData","body","trust","uid","headers","info","CustomerService","getDeviceInfo","token","customer","signup","status","json","data","message","error","logIn","deviceId","deviceInfo","tokenData","findCustomer","login","getCustomerLoginType","phone","password","otp","timeLeft","getLoginType","logOut","logOutCustomerData","logout","signUpMerchant","merchantData","newEmail","email","toLowerCase","merchant","sendCode","resend","console","log","success","loginMerchant"],"mappings":"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"}